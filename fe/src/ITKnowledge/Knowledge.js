import React from 'react';
import './Knowledge.css';

const Knowledge = () => {
  return (
    <div className="it__wrap">
      <div className="section1">
        <h3>'저수준' 언어와 '고수준' 언어</h3>
        <p>
          개발자들은 기존의 것을 반전시키거나 새로운 것을 만들기 좋아합니다. 실제로 C언어는 많은 사람이 선택해 사용했으며, 이후 다양한 언어로 발전했습니다. C언어가 발전해서 Object-C, c++, 파이썬이 되었습니다. 발전한다는 말은 다양한 의미일 수 있지만, 보통은 사용하기 편해지는 방식으로 개선되는 것을 뜻합니다. 이런 프로그래밍 언어를 구분하는 하나의 기준이 있다면, 바로 '저수준' 언어와 '고수준' 언어입니다. '저수준'은 '컴퓨터 친화적인 언어'입니다. '고수준'은 '인간 친화적인 언어'죠.
        </p>
        <p>
          컴퓨터 친화적인 언어들은 배우기가 쉽지 않습니다. 컴퓨터가 어떻게 일해야 하는지 구체적으로, 꼼꼼하게 적어줘야 하져. 그렇지 않으면 오류가 자주 발생합니다. 대신 장점이 있습니다. 컴퓨터 입장에서는 구체적으로 적혀있으니 일하기 쉽습니다. 따라서 낮은 사양의 컴퓨터에서도 원활히 작동합니다.
        </p>
        <p>
          반면, 인간 친화적인 언어들은 사람들이 학습하기 쉽습니다. 쓰기도 편리하고, 유지 보수도 저수준 언어에 비해 쉽습니다. 즉, 원래 컴퓨터에게 꼼꼼하게 설명해 줘야 할 부분들을 조금만 설명해 줘도 컴퓨터가 알아서 행동한다는 이야기입니다. 하지만 그만큼 컴퓨터가 더 많이 고민해야 하기 때문에 저수준 언어보다 작동이 느립니다. 따라서 고수준 언어는 컴퓨터의 사양에 따라 잘 작동할 수도, 그렇지 않을수도 있습니다.
        </p>
        <p>
          보통 3~4년에 한 번씩 컴퓨터를 교체하기 때문에, 우리가 쓰는 컴퓨터들은 사양이 아주 좋습니다. 따라서 컴퓨터에 들어가는 소프트웨어들은 고수준의 언어로 만듭니다. 고수준 언어로 쓰인 문서를읽어도 충분히 돌아갈 만큼 빠르니까요.
        </p>
        <p>
          그럼 저수준 언어는 어디서 사용할까요? 요즘 컴퓨터는 다 빠른데, 왜 저수준 언어로 코딩을 할까요? 그 이유는 컴퓨터 사양을 낮추고 싶어서입니다. 그래야 컴퓨터 가격이 저렴해지니까요. 보통 다른 메인 기능이 있는 가전제품에 컴퓨터가 들어갈 때 저수준 언어를 사용합니다. IPTV를 생각해보세요. IPTV 설치비는 아주 저렴하거나 무료입니다. 대신 월 사용료를 받죠. IPTV 안에도 컴퓨터가 들어가는데, 문제는 컴퓨터의 가격입니다. 저렴하게 구매한다고 해도 30만원은 줘야 합니다. 그런데 IPTV 설치비가 30만원 이라고 한다면 사람들이 많이 사용할까요? 아마 그러지 않을 것입니다. 사람들은 고급 '컴퓨터 기능'을 원하는 게 아니기 때문에 회사는 IPTV 셋톱박스에 들어가는 컴퓨터 사양을 낮춰서 가격을 떨어뜨려야 합니다. 이러한 이유로 현실에서는 저수준부터 고수준까지 다양한 언어들이 사용되고 있습니다.
        </p>
      </div> 
      <div className="section2">
        <h3>우리가 자바 최신 버전을 설치해야 하는 이유</h3>
        <p>
          과거에는 운영체제의 종류가 훨씬 다양했습니다. 따라서 개발자가 배워야하는 프로그래밍 언어도 굉장히 많았죠. 문제는 각기 다른 언어를 모두 배운다고 해도 프로그램 버그를 수정하거나 새로운 기능을 추가할 때면, 해야 할 일이 산더미처럼 늘어난다는 것이었습니다. 10개의 운영체제가 있다고 하면, 같은 작업을 10번씩 해야 하니까요. 이 문제는 자바라는 프로그래밍 언어가 해결합니다.
        </p>
        <p>
          자바를 만든 팀은 각 운영체제 위에 JVM(Java Virtual Machine)이라는 소프트웨어를 만들었습니다. JVM 위에서 자바 언어로 만든 프로그램이 돌아갈 수 있도록 한 것이죠. 사용자가 JVM을 설치하기만 하면, 운영체제별로 여러 개의 프로그램을 만들 필요 없이 자바로만 만들면 되니까요. 즉, 자바로만 프로그램을 만들어도 모든 운영체젱서 사용할 수 있께 된 것입니다.
        </p>
        <p> 
          자바 이외에도 다양한 언어가 이런 방식을 취하고 있습니다. 대표적인 게 바로 파이썬입니다. 파이썬으로 프로그램을 만들면 윈도우나 맥 OS 등의 운영체제 위에서 프로그램을 설치 및 실행할 수 있습니다. 물론 자바나 파이썬 같은 프로그램을 사용하는 방식의 단점도 있습니다. 속도가 느리다는 것이죠. 운영체제 위에 프로그램을 올리고, 그 위에 또 프로그램을 돌리는 것이기 때문입니다.
        </p>
      </div>
      <div className="section3">
        <h3>도대체 우분투가 뭐죠?</h3>
        <p>
          이 질문을 설명하기 위해서는 리눅스를 알아야 합니다. 리눅스는 운영체제(OS)입니다. 이렇게 들으면 여러분은 다음과 같이 생각할 수 있어야 합니다. '아, 리눅스는 윈도우, 맥 OS 같은 애들이구나', '아! 그럼 CPU, 메모리, 보조기억장치들을 우리가 신경 쓰지 않아도, 리눅스가 다 관리해주겠구나', '아하! 그럼 윈도우 위에서 파워포인트를 돌리듯, 리눅스 위에서 이런저런 프로그램을 돌리겠구나!'
        </p>
        <p>
          여기서 리눅스를 이야기하는 이유는 리눅스 위에서 '서버 프로그램'을 돌리기 때문입니다. 먼저 '서버 프로그램'이 뭐 하는 프로그램일지 생각해봅시다. '서버'는 '클라이언트'의 요청에 응답하는 컴퓨타입니다. 카카오톡 컴퓨터 혹은 애플의 컴퓨터처럼 사용자의 요청에 따라 파일을 보내줍니다. 이때 요청의 종류는 다양할 수 있습니다. 로그인, 회원 가입, 상품 리스트 요청, 등등 이 중에 로그인 요청을 생각해 보겠습니다.
        </p>
        <p>
          '로그인을 시켜줘'
        </p>
        <p>
          그럼 어떤 정보들이 필요할까여? '아이디'와 '비밀번호'가 필요합니다. 보통 이런 정보들은 로그인 요청을 보낼 때 같이 옵니다. 자, 정보를 요청 받았으니 컴퓨터는 생각을 해야겠죠? '이 아이디가 존재하나?', '존재한다면 비밀번호는 이게 맞나?' 컴퓨터가 생각한다는 것은 코딩된 프로그램이 동작한다는 것을 의미합니다. 프로그래밍 언어로 컴퓨터에 일을 시킨 거죠. 하드웨어를 직접 컨트롤하지 않으려면 운영체제 위에서 프로그램을 돌려야겠죠? 즉, 리눅스 위에 이런 생각을 하는 프로그램을 24시간 365일 돌려놓는 겁니다. 그럼 해당 프로그램이 코딩된 그대로 생각하고 응답해줍니다.
        </p>
        <p>
          그럼 왜 서버 프로그램을 리눅스 위에서 돌릴까요? 윈도우 OS, 맥 OS, iOS, 안드로이드 OS를 두고 굳이 리눅스를 사용하는 이유가 뭘까요? 그 이유는 리눅스가 기본적으로 '무료'이기 때문입니다. 리눅스가 무료로 배포되자 사람들은 이 운영체제를 발전시켰습니다. 그렇게 다양한 버전의 리눅스가 만들어졌습니다. 리눅스에도 다양한 버전들이 존재합니다. 리눅스의 유명한 버전 중 하나가 <b>우분투(Ubuntu)</b>입니다.
        </p>
        <p>
          '우분투는 리눅스다' 즉 리눅스는 하드웨어를 관리해서 사용자가 프로그램을 사용하기 쉽게 도와주는 윈도우와 맥 OS 같은 운영체제이고, 우분투는 그런 리눅스 버전 중 하나라고 이해하시면 됩니다. '레드햇', '안드로이드'와 같은 유료로 리눅스를 개량해서 판매하는 회사들도 있습니다. 리눅스는 무료 버전이지만, 그렇기 때문에 누구나 사용할 수 있고, 고장이 난다면 누군가에게 AS 요청을 하거나 책임을 물을 수 없습니다. 하지만, 이러한 회사들이 운영체제의 품질을 보장해줍니다.
        </p>
      </div>
    </div>
  );
};

export default Knowledge;