{"version":3,"sources":["chapter/imgs/JSX1.png","chapter/imgs/JSX2.png","chapter/imgs/JSX3.png","chapter/imgs/JSX4.png","chapter/imgs/COMPO1.png","chapter/imgs/COMPO2.png","chapter/imgs/COMPO3.png","chapter/imgs/COMPO4.png","chapter/imgs/COMPO5.png","chapter/imgs/COMPO6.png","chapter/imgs/COMPO7.png","chapter/imgs/COMPO8.png","chapter/imgs/COMPO9.png","chapter/imgs/COMPO10.png","chapter/imgs/COMPO11.png","chapter/imgs/chapter4/EVENT1.png","chapter/imgs/chapter4/EVENT2.png","chapter/imgs/chapter4/EVENT3.png","chapter/imgs/chapter4/EVENT4.png","chapter/imgs/chapter4/EVENT7.png","chapter/imgs/chapter4/EVENT8.png","chapter/imgs/chapter5/ref1.png","chapter/imgs/chapter5/ref2.png","chapter/imgs/chapter5/ref3.png","chapter/imgs/chapter5/ref4.png","chapter/imgs/chapter5/ref5.png","chapter/imgs/chapter6/map0.png","chapter/imgs/chapter6/map1.png","chapter/imgs/chapter6/map2.png","chapter/imgs/chapter6/map3.png","chapter/imgs/chapter6/map4.png","chapter/imgs/chapter6/map5.png","chapter/imgs/chapter6/map5_5.png","chapter/imgs/chapter6/map6.png","chapter/imgs/chapter6/map7.png","chapter/imgs/chapter7/ls1.png","chapter/imgs/chapter7/ls2.png","chapter/imgs/chapter7/ls3.png","chapter/imgs/chapter8/hook1.png","chapter/imgs/chapter8/hook2.png","chapter/imgs/chapter8/hook3.png","chapter/imgs/chapter8/hook4.png","chapter/imgs/chapter8/hook5.png","chapter/imgs/chapter8/hook6.png","chapter/imgs/chapter8/hook7.png","chapter/imgs/chapter8/hook8.png","chapter/imgs/chapter8/hook9.png","chapter/imgs/chapter8/hook10.png","chapter/imgs/chapter8/hook11.png","chapter/imgs/chapter9/css1.png","chapter/imgs/chapter9/css2.png","chapter/imgs/chapter9/css3.png","chapter/imgs/chapter9/css4.png","Home.js","chapter/Chapter1.js","chapter/Chapter2.js","chapter/Chapter3.js","chapter/Chapter4.js","chapter/Chapter5.js","chapter/Chapter6.js","chapter/Chapter7.js","chapter/Chapter8.js","chapter/Chapter9.js","function/Counter.js","function/Counter_Reducer.js","function/Say.js","function/ValidationSample.js","function/Input.js","function/Inputs.js","function/IterationSample.js","Hooks/Info.js","Hooks/HookHome.js","function/Average.js","function/Average_useMemo.js","ITKnowledge/Knowledge.js","App.js","index.js"],"names":["module","exports","Home","className","src","alt","href","Chapter1","JSX1","Chapter2","JSX2","JSX3","JSX4","Chapter3","COMPO1","COMPO2","COMPO3","COMPO4","COMPO5","COMPO6","COMPO7","COMPO8","COMPO9","COMPO10","COMPO11","Chapter4","EVENT1","EVENT2","EVENT3","EVENT4","EVENT7","EVENT8","Chapter5","ref1","ref2","ref3","ref4","ref5","Chapter6","map0","map1","map2","map3","map4","map5","map5_5","map6","map7","Chapter7","ls1","ls2","ls3","Chapter8","hook1","hook2","hook3","hook4","hook5","hook6","hook7","hook8","hook9","hook10","hook11","Chapter9","css1","css2","css3","css4","Counter","useState","value","setValue","style","marginRight","onClick","reducer","state","action","type","Counter_Reducer","useReducer","dispatch","Say","message","setMessage","color","setColor","ValidationSample","password","clicked","validated","handleChange","e","setState","target","handleButtonClick","input","focus","ref","this","onChange","Component","Input","username","setUsername","alert","name","placeholder","onKeyPress","key","onclick","Inputs","form","setForm","nextForm","IterationSample","cursor","id","text","names","setNames","inputText","setInputText","nextId","setNextId","nextNames","concat","onMouseOver","nameList","map","onDoubleClick","filter","onRemove","Info","nickname","HookHome","visible","setVisible","Average","numbers","list","setList","number","setNumber","inputE1","useRef","onInsert","nextList","parseInt","current","index","console","log","length","reduce","a","b","avg","useMemo","Knowledge","App","to","path","exact","component","Average_useMemo","ReactDOM","render","document","getElementById"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.8768d028.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JSX1.762cbd27.png\";","module.exports = __webpack_public_path__ + \"static/media/JSX2.784e14da.png\";","module.exports = __webpack_public_path__ + \"static/media/JSX3.17233fb9.png\";","module.exports = __webpack_public_path__ + \"static/media/JSX4.afda2609.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO1.c56a3cd7.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO2.ccd84203.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO3.a6767003.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO4.a85b12f2.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO5.38c1380b.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO6.28be15f8.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO7.19be356c.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO8.42e3850d.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO9.1076fb9e.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO10.5277348b.png\";","module.exports = __webpack_public_path__ + \"static/media/COMPO11.35701622.png\";","module.exports = __webpack_public_path__ + \"static/media/EVENT1.96e4e29a.png\";","module.exports = __webpack_public_path__ + \"static/media/EVENT2.a39bce55.png\";","module.exports = __webpack_public_path__ + \"static/media/EVENT3.31424e09.png\";","module.exports = __webpack_public_path__ + \"static/media/EVENT4.83c77455.png\";","module.exports = __webpack_public_path__ + \"static/media/EVENT7.1730f514.png\";","module.exports = __webpack_public_path__ + \"static/media/EVENT8.e690440d.png\";","module.exports = __webpack_public_path__ + \"static/media/ref1.b567cf20.png\";","module.exports = __webpack_public_path__ + \"static/media/ref2.978802bf.png\";","module.exports = __webpack_public_path__ + \"static/media/ref3.5b983ea3.png\";","module.exports = __webpack_public_path__ + \"static/media/ref4.86d01d17.png\";","module.exports = __webpack_public_path__ + \"static/media/ref5.ad707660.png\";","module.exports = __webpack_public_path__ + \"static/media/map0.f83a6519.png\";","module.exports = __webpack_public_path__ + \"static/media/map1.1aed512a.png\";","module.exports = __webpack_public_path__ + \"static/media/map2.faba4202.png\";","module.exports = __webpack_public_path__ + \"static/media/map3.f8e2e9ff.png\";","module.exports = __webpack_public_path__ + \"static/media/map4.d1cceaff.png\";","module.exports = __webpack_public_path__ + \"static/media/map5.24941b4d.png\";","module.exports = __webpack_public_path__ + \"static/media/map5_5.660e2f4f.png\";","module.exports = __webpack_public_path__ + \"static/media/map6.5fa2b6db.png\";","module.exports = __webpack_public_path__ + \"static/media/map7.e0aec29e.png\";","module.exports = __webpack_public_path__ + \"static/media/ls1.b00049b9.png\";","module.exports = __webpack_public_path__ + \"static/media/ls2.1914ffe4.png\";","module.exports = __webpack_public_path__ + \"static/media/ls3.3b7d5462.png\";","module.exports = __webpack_public_path__ + \"static/media/hook1.178ecec8.png\";","module.exports = __webpack_public_path__ + \"static/media/hook2.550fecdd.png\";","module.exports = __webpack_public_path__ + \"static/media/hook3.26c68c5a.png\";","module.exports = __webpack_public_path__ + \"static/media/hook4.eda5dee5.png\";","module.exports = __webpack_public_path__ + \"static/media/hook5.fe793660.png\";","module.exports = __webpack_public_path__ + \"static/media/hook6.4a56c7eb.png\";","module.exports = __webpack_public_path__ + \"static/media/hook7.86906aab.png\";","module.exports = __webpack_public_path__ + \"static/media/hook8.495106ff.png\";","module.exports = __webpack_public_path__ + \"static/media/hook9.0eb91f02.png\";","module.exports = __webpack_public_path__ + \"static/media/hook10.38de97b8.png\";","module.exports = __webpack_public_path__ + \"static/media/hook11.19347b7e.png\";","module.exports = __webpack_public_path__ + \"static/media/css1.07006824.png\";","module.exports = __webpack_public_path__ + \"static/media/css2.6127f7e3.png\";","module.exports = __webpack_public_path__ + \"static/media/css3.102515d2.png\";","module.exports = __webpack_public_path__ + \"static/media/css4.f920f5ec.png\";","import React from 'react';\r\nimport './Home.css';\r\n\r\nfunction Home() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<div className=\"intro\">\r\n\t\t\t\t<h1>홈</h1>\r\n\t\t\t\t<p>안녕하세요. 홈페이지에 오신 걸 환영합니다.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t이 블로그는 '리액트를 다루는 기술'과 '비전공자를 위한 이해할 수 있는\r\n\t\t\t\t\tIT 지식' 책을 참고하여 작성하고 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"image__wrap\">\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName=\"image__left\"\r\n\t\t\t\t\tsrc=\"https://avatars1.githubusercontent.com/u/54658162?s=460&u=e53c684a07e354391a0cdb0380eba704f74bbbef&v=4\"\r\n\t\t\t\t\talt=\"myimage\"\r\n\t\t\t\t></img>\r\n\t\t\t\t<p className=\"image__right\">\r\n\t\t\t\t\t<a href=\"https://github.com/junh0328?tab=repositories\">\r\n\t\t\t\t\t\t깃허브로 바로가기\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"image__wrap\">\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName=\"image__left\"\r\n\t\t\t\t\tsrc=\"https://junh0328.github.io/portfolio/imgs/my_image.jpg\"\r\n\t\t\t\t\talt=\"myimage\"\r\n\t\t\t\t></img>\r\n\t\t\t\t<p className=\"image__right\">\r\n\t\t\t\t\t<a href=\"https://junh0328.github.io/portfolio/\">\r\n\t\t\t\t\t\t포트폴리오로 바로가기\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './Chapter.css';\r\nimport JSX1 from './imgs/JSX1.png';\r\n\r\nfunction Chapter1() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h1 className=\"chapter__main\">chapter 1</h1>\r\n\t\t\t\t<h2 className=\"chapter__sub\">1.1 왜 리액트인가?</h2>\r\n\t\t\t\t<p className=\"chapter__contenrs\">\r\n\t\t\t\t\t최근 몇 년간 전 세계 개발자는 자바스크립트에 뜨겁게 열광하고 있습니다.\r\n\t\t\t\t\t한때 자바스크립트는 웹 브라우저에서 간단한 연산을 하거나 시각적인\r\n\t\t\t\t\t효과를 주는 단순한 스크립트 언어에 불과했지만, 현재는 웹\r\n\t\t\t\t\t어플리케이션에서 가장 핵심적인 역할을 합니다. 더 나아가 영역을\r\n\t\t\t\t\t확장하여 서버 사이드는 물론 모바일, 데스크톱 애플리케이션에서도\r\n\t\t\t\t\t엄처나게 활약합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t\t이제는 자바스크립트만으로도 규모가 큰 애플리케이션을 만들 수 있는\r\n\t\t\t\t\t시대가 왔습니다. 대규모 애플리케이션 중 프런트엔드 사이드에서 돌아가는\r\n\t\t\t\t\t애플리케이션 구조를 관리하려면 어떻게 해야 할까요? 솔직히 이런\r\n\t\t\t\t\t애플리케이션을 특별한 도구 없이 순수하게 자바스크립트로만 관리하려면\r\n\t\t\t\t\t골치 아프겠죠? 지금까지 수많은 프레임워크가 조금씩 다른 관점에서 이를\r\n\t\t\t\t\t해결하려고 노력해 왔습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t\t이 프레임워크들은 주로 MVC(model-view-controller) 아키텍처,\r\n\t\t\t\t\tMVVM(model-view-view model)아키텍처를 사용합니다. MVC, MVVM, MVW 등과\r\n\t\t\t\t\t같은 여러 구조가 지닌 공통점은 모델과 뷰가 있다는 것인데요, 모델은\r\n\t\t\t\t\t애플리케이션에서 사용하는 데이터를 관리하는 영역이고, 뷰는 사용자에게\r\n\t\t\t\t\t보이는 부분입니다. 프록램이 사용자에게서 어떤 작업(예: 버튼 클릭,\r\n\t\t\t\t\t텍스트 입력 등)을 받으면 컨트롤러는 모델 데이터를 조회하거나 수정하고,\r\n\t\t\t\t\t변경된 사항을 뷰에 반영합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t<img src={JSX1} alt=\"JSX1\" className=\"chapter__imgs\" />\r\n\t\t\t\t\t예를 들어 JSON 파일의 객체중 likes 라는 객체의 값이 1 증가 시키고 싶을\r\n\t\t\t\t\t때, likes 요소를 찾아 내부를 수정해야겠지요? 업데이트하는 항목에 따라\r\n\t\t\t\t\t어떤 부분을 찾아서 변경할지 규칙을 정하는 작업은 간단하지만,\r\n\t\t\t\t\t애플리케이션 규모가 크면 상당히 복잡해지고 제대로 관리하지 않으면\r\n\t\t\t\t\t성능도 떨어질 수 있습니다. 페이스북 개발 팀은 이를 해결하려고 하나의\r\n\t\t\t\t\t아이디어를 고안해 냈는데, 어떤 데이터가 변할 때마다 어떤 변화를 줄지\r\n\t\t\t\t\t고민하는 것이 아니라 그냥 기존 뷰를 날려 버리고 처음부터 새로\r\n\t\t\t\t\t렌더링하는 방식입니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t하지만, 이것이 과연 가능할까요? 웹 브라우저에서 이 방식대로 하면 CPU\r\n\t\t\t\t\t점유율도 크게 증가할텐데요. DOM은 느리니까요. 페이스북 개발팀이 앞서\r\n\t\t\t\t\t설명한 방식으로 최대한 성능을 아끼고 편안한 사용자 경험을 제공하면서\r\n\t\t\t\t\t구현하고자 개발한 것이 바로{' '}\r\n\t\t\t\t\t<b className=\"under_line\">리액트(react)</b>\r\n\t\t\t\t\t입니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2 className=\"chapter__sub\">1.1.1 리액트의 이해</h2>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t리액트는 자바스크립트 라이브러리로 사용자 인터페이스를 만드는데\r\n\t\t\t\t\t사용합니다. 구조가 MVC, MVW 등인 프레임워크와 달리, 오직 V(View)에만\r\n\t\t\t\t\t신경 쓰는 라이브러리입니다. 리액트 프로젝트에서 특정 부분이 어떻게\r\n\t\t\t\t\t생길지 정하는 선언체가 있는데, 이를\r\n\t\t\t\t\t<b className=\"under_line\"> 컴포넌트</b>라고 합니다. 컴포넌트는 다른\r\n\t\t\t\t\t프레임워크에서 사용자 인터페이스를 다룰 때 사용하는 템플릿과는 다른\r\n\t\t\t\t\t개념입니다. 템플릿은 보통 데이터셋이 주어지면 HTML 태그 형식을\r\n\t\t\t\t\t문자열로 반환하는데,{' '}\r\n\t\t\t\t\t<span className=\"under_line\">\r\n\t\t\t\t\t\t이와 달리컴포넌트는 재사용이 가능한 API로 수많은 기능들을 내장하고\r\n\t\t\t\t\t\t있으며, 컴포넌트 하나에서 해당 컴포넌트의 생김새와 작동 방식을\r\n\t\t\t\t\t\t정의합니다.\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t사용자 화면에 뷰를 보여 주는 것을 <b>렌더링</b>이라고 합니다. 리액트\r\n\t\t\t\t\t라이브러리는 뷰를 어떻게 렌더링하길래 데이터가 변할 때마다 새롭게\r\n\t\t\t\t\t리렌더링하면서 성능을 아끼고, 최적의 사용자 경험을 제공할 수 있을까요?\r\n\t\t\t\t\t이 비밀을 파악하려면 리액트 컴포넌트가 최초로 실행한{' '}\r\n\t\t\t\t\t<b>'초기 렌더링'</b>과 컴포넌트의 데이터 변경으로 다시 실행되는{' '}\r\n\t\t\t\t\t<b>'리렌더링'</b> 개념을 이해해야 합니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2 className=\"chapter__sub\">1.1.1.1 초기 렌더링</h2>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t어떤 UI 관련 프레임워크, 라이브러리를 사용하는지 간에 맨 처음 어떻게\r\n\t\t\t\t\t보일지를 정하는 초기 렌더링이 필요합니다. 리액트 에서는 이를 다루는\r\n\t\t\t\t\trender() 함수가 있습니다. 이 함수는 컴포넌트가 어떻게 생겼는지\r\n\t\t\t\t\t정의하는 역할을 합니다. 이 함수는 html 형식의 문자열을 반환하지 않고,\r\n\t\t\t\t\t뷰가 어떻게 생겼고 어떻게 작동하는지에 대한 정보를 지닌 객체를\r\n\t\t\t\t\t반환합니다. 이렇게 컴포넌트의 렌더링 작업이 끝나면 지니고 있는\r\n\t\t\t\t\t정보들을 사용하여 HTML, 마크업을 만들고, 이를 우리가 정하는 실제\r\n\t\t\t\t\t페이지의 DOM 요소 안에 주입합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t컴포넌트를 실제 페이지에 렌더링할 때는 분리된 두 가지 절차를 따릅니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t\t<li className=\"chapter__li\">문자열 형태의 HTML 코드를 생성합니다.</li>\r\n\t\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t\t특정 DOM에 해당 내용을 주입하면 이벤트가 적용됩니다.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2 className=\"chapter__sub\">1.1.1.2 조화 과정</h2>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t리액트에서 뷰를 업데이트할 때는 \"업데이트 과정을 거친다\"라고 하기\r\n\t\t\t\t\t보다는\r\n\t\t\t\t\t<b>\"조화\"</b> 과정을 거친다라고 하는 것이 더 정확한 표현입니다.{' '}\r\n\t\t\t\t\t<span className=\"under_line\">\r\n\t\t\t\t\t\t컴포넌트에서 데이터에 변화가 있을 때 우리가 보기에는 변화에 따라\r\n\t\t\t\t\t\t뷰가 변형되는 것처럼 보이지만, 사실은 새로운 요소를 갈아끼우기\r\n\t\t\t\t\t\t때문입니다.\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t이 작업 또한 render 함수가 맡아서 합니다. 컴포넌트는 데이터를\r\n\t\t\t\t\t업데이트했을 때 단순히 값을 수정하는 것이 아니라, 새로운 데이터를\r\n\t\t\t\t\t가지고 render 함수를 또 다시 호출합니다. 하지만, 이때 render 함수가\r\n\t\t\t\t\t반환하는 결과를 곧바로 DOM에 반영하지 않고, 이전에 render 함수가\r\n\t\t\t\t\t만들었던 컴포넌트 정보와 현재 render 함수가 만든 컴포넌ㅌ 정보를\r\n\t\t\t\t\t비교합니다. 두 가지 뷰를 최소한의 연산으로 비교한 후, 둘의 차이를\r\n\t\t\t\t\t알아내 최소한의 연산으로 DOM 트리를 업데이트하는 것이죠.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2 className=\"chapter__sub\">1.2 리액트의 특징</h2>\r\n\t\t\t\t<h2 className=\"chapter__sub\">1.2.1 Virtual DOM</h2>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\tDOM은 Document Object Model의 약어입니다. 즉, 객체로 문서 구조를\r\n\t\t\t\t\t표현하는 방법으로 XML이나 HTML로 작성합니다. 웹 브라우저는 DOM을\r\n\t\t\t\t\t활용하여 객체에 자바스크립트와 CSS를 적용합니다. DOM은 트리 형태라서\r\n\t\t\t\t\t특정 노드를 찾거나 수정하거나 제거하거나 원하는 곳에 삽입할 수\r\n\t\t\t\t\t있습니다. 요즘 DOM API를 수많은 플랫폼과 웹 브라우저에 사용하는데, 이\r\n\t\t\t\t\tDOM에는 치명적인 한 가지 문제점이 있습니다. 바로 동적 UI에 최적화되어\r\n\t\t\t\t\t있지 않다는 것입니다. HTML은 자체적으로는 정적입니다. 자바스크립트를\r\n\t\t\t\t\t사용하여 이를 동적으로 만들어줄 수 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\tDOM 자체는 빠릅니다. 하지만, DOM 자체를 읽고 쓸 때의 성능은\r\n\t\t\t\t\t자바스크립트 객체를 처리할 때의 성능과 비교하여 다르지 않습니다. 단,\r\n\t\t\t\t\t웹 브라우저 단에서 DOM에 변화가 일어나면 웹 브라우저가 CSS를 다시\r\n\t\t\t\t\t연산하고, 레이아웃을 구성하고, 페이지를 리페인트합니다. 이 과정에서\r\n\t\t\t\t\t시간이 허비되는 것입니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t<b className=\"chpater__contents\">해결법</b>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\tHTML 마크업을 시각적인 형태로 변환하는 것은 웹 브라우저가 하는 주\r\n\t\t\t\t\t역할이기 때문에, 이를 처리할 때 컴퓨터 자원을 사용하는 것은 어쩔 수\r\n\t\t\t\t\t없습니다. DOM을 조작할 때마다 엔진이 웹 페이지를 새로 그리기 때문에\r\n\t\t\t\t\t업데이트가 너무 잦으면 성능이 저하될 수 있습니다. 따라서 우리는 DOM을\r\n\t\t\t\t\t최소한으로 조작하여 작업을 처리하는 방식으로 개선할 수 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\tVirtual DOM을 사용하면 실제 DOM에 접근하여 조작하는 대신 이를 추상화한\r\n\t\t\t\t\t자바스크립트 객체를 구성하여 사용합니다. 마치 실제 DOM의 가벼운 사본과\r\n\t\t\t\t\t비슷합니다. 리액트에서 데이터가 변하여 웹 브라우저에 실제 DOM을\r\n\t\t\t\t\t업데이트할 때는 다음 세 가지 절차를 밟습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t\t<li className=\"chapter__li\">전체 UI를 Virtual DOM에 리렌더링</li>\r\n\t\t\t\t\t<li className=\"chapter__li\">이전 내용과 현재 내용을 비교</li>\r\n\t\t\t\t\t<li className=\"chapter__li\">바뀐 부분만 실제 DOM에 적용</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t\t리액트와 Virtual DOM이 언제나 제공할 수 있는 것은 바로 업데이트 처리\r\n\t\t\t\t\t간결성입니다. UI를 업데이트하는 과정에서 생기는 복잡함을 모두\r\n\t\t\t\t\t해소하고, 더욱 쉽게 업데이트에 접근할 수 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<h2 className=\"chapter__sub\">1.2.2 기타 특징</h2>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t일부 웹 프레임워크가 MVC 또는 MVW 등의 구조를 지향하는 것과 달리\r\n\t\t\t\t리액트는 오직 뷰만 담당합니다. 다시 한 번 강조하면 리액트는 프레임워크가\r\n\t\t\t\t아니라 라이브러리입니다. 다른 웹 프레임워크가 Ajax, 데이터 모델링,\r\n\t\t\t\t라우팅 등과 같은 기능을 내장하고 있는 반면, 리액트는 정말 뷰만 신경 쓰는\r\n\t\t\t\t라이브러리이므로 기타 기능은 직접 구현하여 사용해야 합니다. 하지만, 너무\r\n\t\t\t\t걱정할 필요는 없습니다. 다른 개발자들이 만든 라이브러리, 즉 라우팅에는\r\n\t\t\t\t리액트 라우터, Ajax 처리에는 axios, fetch, 상태 관리에는 리덕스나,\r\n\t\t\t\tMobX를 사용하여 빈 자리를 채우면 됩니다. 해당 분야에서 마음에 드는\r\n\t\t\t\t라이브러리를 사용하면 되니까 자신의 취향대로 스택을 설정할 수 있다는\r\n\t\t\t\t장점이 있지만, 여러 라이브러리를 접해야 한다는 단점도 있습니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chapter1;\r\n","import React from 'react';\r\nimport './Chapter.css';\r\nimport JSX2 from './imgs/JSX2.png';\r\nimport JSX3 from './imgs/JSX3.png';\r\nimport JSX4 from './imgs/JSX4.png';\r\n\r\nfunction Chapter2() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">chapter 2</h1>\r\n\t\t\t<h2 className=\"chapter__sub\">2.1 코드 이해하기</h2>\r\n\t\t\t<p className=\"chapter__contents\">import React from 'react';</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t이 코드는 리액트를 불러와서 사용할 수 있게 해 줍니다. 리액트 프로젝트를\r\n\t\t\t\t만들 때 node_modules라는 디렉터리도 함께 생성되는데요, 프로젝트 생성\r\n\t\t\t\t과정에서 node_modules 디렉터리에 react 모듈이 설치됩니다. 그리고 이렇게\r\n\t\t\t\timport 구문을 통해 리액트를 불러와서 사용할 수 있는 것이죠. 여기서 한\r\n\t\t\t\t가지 알아 둘 점이 있습니다. 아렇게 모듈을 불러와서 사용하는 것은 사실\r\n\t\t\t\t원래 브라우저에는 없던 기능입니다. 브러우저가 아닌 환경에서\r\n\t\t\t\t자바스크립트를 실행할 수 있게 해주는 환경인 Node.js에서 지원하는\r\n\t\t\t\t기능입니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t이러한 기능을 브라우저에서도 사용하기 위해 <b>번들러(bundler)</b>를\r\n\t\t\t\t사용합니다. 대표적인 번들러로 웹팩, Parcel, browserify라는 도구들이\r\n\t\t\t\t있으며, 각 도구마다 특성이 다릅니다. 리액트 프로젝트에서는 주로 웹팩을\r\n\t\t\t\t사용하는 추세입니다. 편의성과 확장성이 다른 도구들보다 뛰어나기\r\n\t\t\t\t때문입니다. 번들러 도구를 사용하면 import (또는 require)로 모듈을\r\n\t\t\t\t불러왔을 때 불러온 모듈을 모두 합쳐서 하나의 파일을 생성해 줍니다. 또\r\n\t\t\t\t최적화 과정에서 여러 개의 파일을 분리될 수도 있습니다. 이책의\r\n\t\t\t\t프로젝트에서는 <b>src/index.js</b>를 시작으로 필요한 파일을 다 불러와서\r\n\t\t\t\t번들링하게 됩니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t리액트를 불러오는 코드 하단에는 다음과 같이 SVG 파일과 CSS 파일을 import\r\n\t\t\t\t하는 코드가 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"chapter__li\">import logo from './logo.svg';</li>\r\n\t\t\t\t<li className=\"chapter__li\">import './App.css';</li>\r\n\t\t\t</ul>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t웹팩을 사용하면 SVG 파일과 CSS 파일도 불러와서 사용할 수 있습니다.\r\n\t\t\t\t이렇게 파일들을 불러오는 것은 웹팩의 <b>로더</b> 라는 기능이 담당합니다.\r\n\t\t\t\t로더는 여러 가지 종류가 있습니다. babel-loader는 자바스크립트 파일들을\r\n\t\t\t\t불러오면서 최신 자바스크립트 문법으로 작성된 코드를 바벨이라는 도구를\r\n\t\t\t\t사용하여 ES5 문법으로 변환해 줍니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t<b> 최신 자바스크립트로 작성된 코드를 왜 변환하나요?</b>\r\n\t\t\t\t<br />\r\n\t\t\t\tES5는 이전 버전의 자바스크립트를 의미합니다. 최신 자바스크립트 문법을\r\n\t\t\t\tES5 형태로 변환하는 것은 구버전 웹 브라우저와 호환하기 위해서입니다.\r\n\t\t\t\t현재 대부분의 최신 웹 브라우저에서는 자체적으로 최신 자바스크립트 문법을\r\n\t\t\t\t바로 실행할 수 있지만, 구버전 웹 브라우저에서는 실행되지 않기 때문에\r\n\t\t\t\t사전에 꼭 변환해 주어야 합니다. 또한, 우리가 앞으로 배우게 될 리액트\r\n\t\t\t\t컴포넌트에서 사용하는 JSON 문법도 정식 자바스크립트 문법이 아니므로 ES5\r\n\t\t\t\t형태의 코드로 변환해야 합니다.\r\n\t\t\t\t<span className=\"under_line\">\r\n\t\t\t\t\tES5 이후의 문법들은 ECMAScirpt등과 같은 형태로 이름이 지어집니다.\r\n\t\t\t\t</span>\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">2.2 JSX란?</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tJSX는 자바스크립트의 확장 문법이며 XML과 매우 비슷하게 생겼습니다. 이런\r\n\t\t\t\t형식으로 작성한 코드는 브라우저에서 실행되기 전에 코드가 번들링되는\r\n\t\t\t\t과정에서 바벨을 이용하여 일반 자바스크립트 형태의 코드로 변환됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">2.3 JSX의 장점</h2>\r\n\t\t\t<h3 className=\"chapter__sub\">2.3.1 보기 쉽고 익숙하다</h3>\r\n\t\t\t<h3 className=\"chpater__sub\">2.3.2 더욱 높은 활용도</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tJSX에서는 우리가 알고 있는 div나 span과 같은 HTML 태그를 사용할 수 있을\r\n\t\t\t\t뿐만 아니라, 앞으로 만들 컴포넌트도 JSX 안에서 작성할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b> ReactDOM.render는 무엇인가요?</b>\r\n\t\t\t\t<br />이 코드는 컴포넌트를 페이지에 렌더링하는 역할을 하며, react-dom\r\n\t\t\t\t모듈을 불러와 사용할 수 있습니다. 이 함수의 첫 번째 파라미터에는\r\n\t\t\t\t페이지에 렌더링할 내용을 JSX로 작성하고, 두 번째 파라미터에는 해당 JSX를\r\n\t\t\t\t렌더링할 document 내부 요소를 설정합니다. 여기서는 id가 root인 요소 안에\r\n\t\t\t\t렌더링을 하도록 설정했는데요, 이 요소는 public/index.html 파일을 열어\r\n\t\t\t\t보면 있답니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b> React.StrictMode는 무엇인가요?</b>\r\n\t\t\t\t<br />\r\n\t\t\t\tReact.StrictMode는 리액트 프로젝트에서 리액트의 레거시 기능을 사용하지\r\n\t\t\t\t못하게 하는 기능입니다. 이를 사용하면 문자열 ref, componentWillMount 등\r\n\t\t\t\t나중에는 완전히 사라지게 될 옛날 기능을 사용했을 때 경고를 출력합니다.\r\n\t\t\t\t이 책을 작성할 시점에는 해당 옵션이 기본적으로 적용되어 있지 않았습니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b>\r\n\t\t\t\t\t리액트 컴포넌트에서 요소 여러 개를 왜 하나의 요소로 꼭 감싸 주어야\r\n\t\t\t\t\t할까요?\r\n\t\t\t\t</b>\r\n\t\t\t\t<br />\r\n\t\t\t\tReact 에서 사용하는 Virtual DOM에서 컴포넌트 변화를 감지해낼 때\r\n\t\t\t\t효율적으로 비교할 수 있도록 규칙을 세웠기 때문입니다. (컴포넌트 내부는\r\n\t\t\t\t반드시 하나의 DOM 트리 구조로 이루어져야 한다.) 여기서 꼭 div 요소를\r\n\t\t\t\t사용하고 싶지 않을 수도 있습니다. 그런 경우에는 리액트 <b>v16</b>부터\r\n\t\t\t\t도입된 Fragment라는 기능을 사용하면 됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">2.4.3 if문 대신 조건부 연산자</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tJSX 내부의 자바스크립트 표현식에서 if문을 사용할 수는 없습니다. 하지만\r\n\t\t\t\t조건에 따라 다른 내용을 렌더링해야 할 때는 JSX 밖에서 if문을 사용하여\r\n\t\t\t\t사전에 값을 설정하거나, 중괄호 안에 조건부 연산자를 사용하면 됩니다.\r\n\t\t\t\t조건부 여산자의 또 다른 이름은 삼항 연산자입니다.\r\n\t\t\t\t<img src={JSX2} alt=\"JSX2\" className=\"chapter__imgs\" />\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chpater__sub\">\r\n\t\t\t\t2.4.4 AND 연산자 (&&)를 사용한 조건부 렌더링\r\n\t\t\t</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t개발하다 보면 특정 조건을 만족할 때 내용을 보여 주고, 만족하지 않을 때\r\n\t\t\t\t아예 아무것도 렌더링하지 않아야 하는 상황이 올 수 있습니다. 이럴 때도\r\n\t\t\t\t조건부 연산자를 통해 구현할 수는 있습니다.\r\n\t\t\t\t<img src={JSX3} alt=\"JSX3\" className=\"chapter__imgs\" />위 코드와 같이\r\n\t\t\t\tnull을 렌더링 하면 아무것도 보여 주지 않습니다. 하지만 이것보다 더 짧은\r\n\t\t\t\t코드로 똑같은 작업을 할 수 있습니다. 다음과 같이 AND 연산자를 사용해서\r\n\t\t\t\t조건부 렌더링을 할 수 있습니다.\r\n\t\t\t\t<img src={JSX4} alt=\"JSX4\" className=\"chapter__imgs\" />\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chapter2;\r\n","import React from 'react';\r\nimport './Chapter.css';\r\nimport COMPO1 from './imgs/COMPO1.png';\r\nimport COMPO2 from './imgs/COMPO2.png';\r\nimport COMPO3 from './imgs/COMPO3.png';\r\nimport COMPO4 from './imgs/COMPO4.png';\r\nimport COMPO5 from './imgs/COMPO5.png';\r\nimport COMPO6 from './imgs/COMPO6.png';\r\nimport COMPO7 from './imgs/COMPO7.png';\r\nimport COMPO8 from './imgs/COMPO8.png';\r\nimport COMPO9 from './imgs/COMPO9.png';\r\nimport COMPO10 from './imgs/COMPO10.png';\r\nimport COMPO11 from './imgs/COMPO11.png';\r\n\r\nfunction Chapter3() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter3</h1>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트를 사용하여 애플리케이션의 인터페이스를 설계할 때 사용자가 볼 수\r\n\t\t\t\t있는 요소는 여러가지 컴포넌트로 구성되어 있습니다. 컴포넌트의 기능은\r\n\t\t\t\t단순한 템플릿 이상입니다.\r\n\t\t\t</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<li className=\"under_line\">\r\n\t\t\t\t\t데이터가 주어졌을 때 이에 맞추어 UI를 만들어 줍니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t라이프 사이클 API를 이용하여 컴포넌트가 화면에서 나타날 때, 사라질 때,\r\n\t\t\t\t\t변화가 일어날 때 주어진 작업들을 처리해줍니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>임의 메소드를 만들어 특별한 기능을 붙여줄 수 있습니다.</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2 className=\"chapter__sub\">3.1 클래스형 컴포넌트</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t컴포넌트를 선언하는 방식은 두 가지입니다. 하나는 <b>함수형 컴포넌트</b>\r\n\t\t\t\t이고, 또 다른 하나는 <b>클래스형 컴포넌트</b>입니다. 클래스형 컴포넌트와\r\n\t\t\t\t함수형 컴포넌트의 차이점은 클래스형 컴포넌트의 경우 state기능 및\r\n\t\t\t\t라이프사이클 기능을 사용할 수 있다는 것과 임의 메소드를 정의할 수 있다는\r\n\t\t\t\t것입니다. 클래스형 컴포넌트안에서는 render 함수가 꼭 있어야 하고, 그\r\n\t\t\t\t안에서 보여 주어야 할 JSX를 반환해야 합니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b>\r\n\t\t\t\t\t컴포넌트를 선언할 수 있는 두 가지 방법 중 어느 상황에 함수형\r\n\t\t\t\t\t컴포넌트를 사용해야 할까요?\r\n\t\t\t\t</b>\r\n\t\t\t</p>\r\n\t\t\t<p>함수형 컴포넌트의 장점을 나열해 보면 다음과 같습니다.</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>클래스형 컴포넌트보다 선언하기가 훨씬 편합니다.</li>\r\n\t\t\t\t<li>메모리 자원도 클래스형 컴포넌트보다 덜 사용합니다.</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t프로젝트를 완성하여 빌드한 후 배포할 때도 함수형 컴포넌트를 사용하는\r\n\t\t\t\t\t것이 결과물의 파일 크기가 더 작습니다.\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<p>\r\n\t\t\t\t하지만, 함수형 컴포넌트의 주요 단점은 state와 라이프사이클 API의 사용이\r\n\t\t\t\t불가능하다는 점입니다. 리액트 v16.8 업데이트 이후 Hooks라는 기능이\r\n\t\t\t\t도입되면서 해결되긴 하였습니다. 리액트 공식 매뉴얼에서는 컴포넌트를 새로\r\n\t\t\t\t작성할 때 함수형 컴포넌트와 Hooks를 사용하도록 권장하고 있습니다.\r\n\t\t\t\t하지만, 그렇다고 해서 클래스형 컴포넌트가 사라지는 것은 아니므로\r\n\t\t\t\t클래스형 컴포넌트의 기능은 꼭 알아 두어야 합니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">3.2 첫 컴포넌트 생성</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b> ES6 의 화살표 함수</b>\r\n\t\t\t\t<br />\r\n\t\t\t\t화살표 함수는 함수를 표현하는 새로운 방식입니다. 그렇다고 해서 기존\r\n\t\t\t\tfunction을 이용한 함수 선언 방식을 아예 대체하지는 않습니다. 이 문법은\r\n\t\t\t\t주로 함수를 파라미터로 전달할 때 유용합니다.\r\n\t\t\t\t<img src={COMPO1} alt=\"compo1\" className=\"chapter__imgs\" />\r\n\t\t\t\tfunction()을 사용했을 때는 검둥이가 나타나고, () =&gt; 를 사용했을 때는\r\n\t\t\t\t흰둥이가 나타납니다. 일반 함수는 자신이 종속된 객체를 this로 가리키며,\r\n\t\t\t\t화살표 함수는 자신이 종속된 인스턴스를 가리킵니다. 화살표 하수는 값을\r\n\t\t\t\t연산하여 바로 반환해야 할 때 사용하면 가독성을 높일 수 있습니다.\r\n\t\t\t\t<br />\r\n\t\t\t\t<b> Reactjs Code Snippets 를 사용하여 코드 생성하기</b>\r\n\t\t\t\t<br />\r\n\t\t\t\tVS Code에서는 확장 프로그램을 설치했다면 컴포넌트 코드를 간편하고 빠르게\r\n\t\t\t\t생성할 수 있습니다. 에디터에 rsc를 입력하고 Enter를 눌러 보새요.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">3.3 props</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tprops는 properties의 줄임 표현으로 컴포넌트 속성을 설정할 때 사용하는\r\n\t\t\t\t요소입니다. props 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서\r\n\t\t\t\t설정할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">3.3.1 JSX 내부에서 props 렌더링</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tprops 값은 컴포넌트 함수의 파라미터로 받아 와서 사용할 수 있습니다.\r\n\t\t\t\tprops를 렌더링할 때 2장에서 배웠던 것처럼 JSX 내부에서 중괄호 기호로\r\n\t\t\t\t감싸 주면 됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chpater__sub\">\r\n\t\t\t\t3.3.2 컴포넌트를 사용할 때 props 값 지정하기\r\n\t\t\t</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<img src={COMPO2} alt=\"compo2\" className=\"chapter__imgs\" />\r\n\t\t\t</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>부모 컴포넌트(App.js)에서 props.name 값을 설정하고</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t자식 컴포넌트(MyComponent.js)에서 props.name 으로 호출하여 사용한다.\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h3 className=\"chpater__sub\">3.3.3 props 기본값 설정: defaultProps</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t컴포넌트의 props에 name값을 지정하지 않을 경우, '안녕하세요, 제 이름은\r\n\t\t\t\t입니다.' 라고 출력될 것 입니다. 지금처럼 props값을 따로 지정하지 않았을\r\n\t\t\t\t때 보여 줄 기본값을 설정하는 defaultProps에 대해 알아봅시다.\r\n\t\t\t\t<img src={COMPO3} alt=\"compo3\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t자식 컴포넌트에서 설정하고, props.name의 값을 부모 컴포넌트에 받아올 수\r\n\t\t\t\t없을 때 defaultProps에 설정한 '기본이름'을 대신 넣어 랜더링합니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chpater__sub\">\r\n\t\t\t\t3.3.4 <b>비구조화 할당 문법</b>을 통해 props 내부 값 추출하기\r\n\t\t\t</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t현재 MyComponent에서 props 값을 조회할 때마다 props.name,\r\n\t\t\t\tprops.children과 같이 [props.] 이라는 키워드를 앞에 붙여 주고 있습니다.\r\n\t\t\t\t이러한 작업을 더 편하게 하기 위해 ES6의 <b>비구조화 할당 문법</b>을\r\n\t\t\t\t사용하여 내부 값을 바로 추출하는 방법을 알아보겠습니다.\r\n\t\t\t\t<img src={COMPO4} alt=\"compo4\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t부모 컴포넌트에서 넘겨받을 props를 비구조화 할당을 통해 담은 파라미터를\r\n\t\t\t\t더 간단하게 사용할 수 있습니다.\r\n\t\t\t\t<img src={COMPO5} alt=\"compo5\" className=\"chapter__imgs\"></img>더 짧게\r\n\t\t\t\t함수형 컴포넌트에서 비구조화 할당을 사용할 수 있었습니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chpater__sub\">\r\n\t\t\t\t3.3.5 클래스형 컴포넌트에서 props 사용하기\r\n\t\t\t</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t클래스형 컴포넌트에서 props를 사용할 때는 render 함수에서 this.props를\r\n\t\t\t\t조회하면 됩니다. 그리고 defaultProps와 propTypes는 똑같은 방식으로\r\n\t\t\t\t설정할 수 있습니다.\r\n\t\t\t\t<img src={COMPO6} alt=\"compo6\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t또한 static 정적 변수를 사용하여 class 내부에서 defaultProps를 저장할\r\n\t\t\t\t수도 있습니다.\r\n\t\t\t\t<img src={COMPO7} alt=\"compo7\" className=\"chapter__imgs\" />\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">3.4 state</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트에서 state는 컴포넌트 내부에서 바뀔 수 있는 값을 의미합니다.\r\n\t\t\t\tprops는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값이며,\r\n\t\t\t\t컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있습니다. props를\r\n\t\t\t\t바꾸려면 무조건 부모 컴포넌트에서 바꾸어 주어야 합니다.{' '}\r\n\t\t\t\t<b>리액트에는 두 가지 종류의 state가 있습니다.</b> 하나는 클래스형\r\n\t\t\t\t컴포넌트가 지니고 있는 state 이고, 다른 하나는 함수형 컴포넌트에서{' '}\r\n\t\t\t\t<b>useState라는 훅 함수</b>를 통해 사용하는 state입니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">3.4.1 클래스형 컴포넌트의 state</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t클래스형 컴포넌트에서 state를 설정할 때는 다음과 같이 constructor\r\n\t\t\t\t메소드를 작성하여 설정합니다. 이는 컴포넌트의 생성자 메서드입니다.\r\n\t\t\t\t클래스형 컴포넌트에서 constructor를 작성할 때는 반드시 super(props)를\r\n\t\t\t\t호출해 주어야 합니다. 이 함수가 호출되면 현재 클래스형 컴포넌트가\r\n\t\t\t\t상속받고 있는 리액트의 Component 클래스가 지닌 생성자 함수를 호출해\r\n\t\t\t\t줍니다. 그 다음에는 this.state 값에 초깃값을 설정해 주었습니다.\r\n\t\t\t\t컴포넌트의 state는 객체 형식이어야합니다.\r\n\t\t\t\t<img src={COMPO8} alt=\"compo8\" className=\"chapter__imgs\"></img>\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">3.4.1.2 state를 constructor에서 꺼내기</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t앞에서 state의 초깃값을 지정하기 위해 constructor 메소드를 선언해\r\n\t\t\t\t주었는데요, 또 다른 방식으로도 state의 초깃값을 지정해 줄 수 있습니다.\r\n\t\t\t\t<img src={COMPO9} alt=\"compo9\" className=\"chapter__imgs\"></img>\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">\r\n\t\t\t\t3.4.2 함수형 컴포넌트에서 useState 사용하기\r\n\t\t\t</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트 16.8 이전 버전에서는 함수형 컴포넌트에서 state를 사용할 수\r\n\t\t\t\t없었습니다. 하지만, 16.8 이후부터는 useState라는 함수형 컴포넌트에서도\r\n\t\t\t\tstate를 사용할 수 있게 되었습니다. 사용법은 조금 다릅니다. 이 과정에서\r\n\t\t\t\tHooks 라는 것을 사용하게 됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">3.4.2.1 useState 사용하기</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t배열 비 구조화 할당 문법을 통해 useState의 기본적인 구조를 알 수\r\n\t\t\t\t있습니다. useState 함수의 인자에는 상태의 초깃값을 넣어 줍니다. 클래스형\r\n\t\t\t\t컴포넌트에서의 state 초깃값은 객체 형태를 넣어 주어야 한다고 배웠습니다.\r\n\t\t\t\tuseState에서는 반드시 객체가 아니어도 상관없습니다. 값의 형태는\r\n\t\t\t\t자유입니다. 함수를 호출하면 배열이 반환되는데요. 배열의 첫 번째 원소는\r\n\t\t\t\t현재 상태이고, 두 번째 원소는 상태를 바꾸어 주는 함수입니다. 이 함수를\r\n\t\t\t\t세터함수라고 부릅니다. 그리고 배열 비구조화 할당을 통해 이름을 자유롭게\r\n\t\t\t\t정해줄 수 있습니다.현재 message 와 setMessage라고 이름을 설정해\r\n\t\t\t\t주었는데요. text와 setText라고 이름을 자유롭게 바꾸어 주어도\r\n\t\t\t\t상관없습니다.\r\n\t\t\t\t<img src={COMPO10} alt=\"compo10\" className=\"chapter__imgs\" />\r\n\t\t\t\tprops와 state는 둘 다 컴포넌트에서 사용하거나 렌더링할 데이터를 담고\r\n\t\t\t\t있으므로 비슷해 보일 수 있지만, 그 역할은 매우 다릅니다. props는 부모\r\n\t\t\t\t컴포넌트가 설정하고, state는 컴포넌트 자체적으로 지닌 값으로 컴포넌트\r\n\t\t\t\t내부에서 값을 업데이트할 수 있습니다. props를 사용한다고 해서 값이\r\n\t\t\t\t부조건 고정적이지는 않습니다. 부모 컴포넌트의 state를 자식 컴포넌트의\r\n\t\t\t\tprops로 전달하고, 자식 컴포넌트에서 특정 이벤트가 발생할 때 부모\r\n\t\t\t\t컴포넌트의 메서드를 호출하면 props도 유동적으로 사용할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chpater__sub\">3.5 state를 사용할 때 주의 사항</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t클래스형 컴포넌트든 함수형 컴포넌트든 state를 사용할 때는 주의해야 할\r\n\t\t\t\t사항이 있습니다. state 값을 바꾸어야 할 때는 setState 혹은 useState를\r\n\t\t\t\t통해 전달받은 세터 함수를 사용해야 합니다. 그렇다면 배열이나 객체를\r\n\t\t\t\t업그레이드 해야 할 때는 어떻게 해야 할까요? 이런 상황에서는 배열이나\r\n\t\t\t\t객체 사본을 만들고 그 사본에 값을 업데이트한 후, 그 사본의 상태를\r\n\t\t\t\tsetState 혹은 세터 함수를 통해 업그레이드합니다.\r\n\t\t\t\t<img src={COMPO11} alt=\"compo11\" className=\"chapter__imgs\" />\r\n\t\t\t\t객체에 대한 사본을 만들 때는 <b>spread 연산자</b>라 불리는 (...) 을\r\n\t\t\t\t사용하여 처리하고, 배열에 대한 사본을 만들 때는 배열의 내장 함수들을\r\n\t\t\t\t활용합니다. 이에 대한 자세한 내용은 이후 차근차근 배워 보겠습니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Chapter3;\r\n","import React from 'react';\r\nimport EVENT1 from './imgs/chapter4/EVENT1.png';\r\nimport EVENT2 from './imgs/chapter4/EVENT2.png';\r\nimport EVENT3 from './imgs/chapter4/EVENT3.png';\r\nimport EVENT4 from './imgs/chapter4/EVENT4.png';\r\nimport EVENT7 from './imgs/chapter4/EVENT7.png';\r\nimport EVENT8 from './imgs/chapter4/EVENT8.png';\r\n\r\nfunction Chapter4() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter4, Event Handling</h1>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것을 이벤트라고\r\n\t\t\t\t합니다. 예를 들어 버튼에 마우스 커서를 올렸을 때는 onmouseover 이벤트를\r\n\t\t\t\t실행하고, 클릭헸을 때는 onclick 이벤트를 실행합니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">4.1 리액트의 이벤트 시스템</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트의 이벤트 시스템은 웹 브라우저의 HTML 이벤트와 인터페이스가\r\n\t\t\t\t동일하기 대문에 사용법이 꽤 비슷합니다. 사용법은 일반 HTML에서 이벤트를\r\n\t\t\t\t작성하는 것과 비슷한데, 주의해야 할 몇 가지 사항이 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<b>이벤트를 사용할 때 주의 사항</b>\r\n\t\t\t\t<li>1. 이벤트 이름은 카멜 표기법으로 작성합니다. (낙타 등 표기법)</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t2. 이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라. 함수\r\n\t\t\t\t\t형태의 값을 전달합니다. HTML에서 이벤트를 설정할 때는 큰따옴표 안에\r\n\t\t\t\t\t실행할 코드를 넣었지만, 리액트에서는 함수형태의 객체를 전달합니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t3. DOM 요소에만 이벤트를 설정할 수 있습니다. 즉 div, button, input,\r\n\t\t\t\t\tform, ...등의 DOM 요소에는 이벤트를 설정할 수 있지만, 우리가 직접 만든\r\n\t\t\t\t\t컴포넌트에는 이벤트를 자체적으로 설정할 수 없습니다.\r\n\t\t\t\t\t<b>\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t예를 들어 다음과 같이 MyComponent에 onClick 값을 설정한다면\r\n\t\t\t\t\t\tMyComponent를 클릭할 때 doSomething 함수를 실행하는 것이 아니라,\r\n\t\t\t\t\t\t그냥 이름이 onclick인 props를 MyComponent에게 전달해 줄 뿐입니다.\r\n\t\t\t\t\t</b>\r\n\t\t\t\t\t따라서 컴포넌트에 자체적으로 이벤트를 설정할 수는 없습니다. 하지만\r\n\t\t\t\t\t전달받은 props를 컴포넌트 내부의 DOM 이벤트로 설정할 수는 있습니다.\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<img src={EVENT1} alt=\"event1\" className=\"chapter__imgs\"></img>\r\n\r\n\t\t\t<h2 className=\"chapter__sub\">4.2 onChange 이벤트 핸들링하기</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<img src={EVENT2} alt=\"event2\" className=\"chapter__imgs\" />\r\n\t\t\t\t여기서 콘솔에 기록되는 e 객체는 SyntheticEvent 웹 브라우저의 네이티브\r\n\t\t\t\t이벤트를 감싸는 객체입니다. 네이티브 이벤트와 인터페이스가 같으므로 순수\r\n\t\t\t\t자바스크립트에서 HTML 이벤트를 다룰 때와 똑같이 사용하면 됩니다.\r\n\t\t\t\tSyntheticEvent는 네이티브 이벤트와 달리 이벤트가 끝나고 나면 이벤트가\r\n\t\t\t\t초기화되므로 정보를 참조할 수 없습니다. 예를 들어, 0.5초 뒤에 e 객체를\r\n\t\t\t\t참조하면 e 객체 내부의 모든 값이 비워지게 됩니다. 만약 비동기적으로\r\n\t\t\t\t이벤트 객체를 참조할 일이 있다면 e.persist() 함수를 호출해 주어야\r\n\t\t\t\t합니다.\r\n\t\t\t\t<br />\r\n\t\t\t\tconsole.log(e)의 값을 console.log(e.target.value)로 바꿔보세요. 이벤트가\r\n\t\t\t\t발생할 때마다 콘솔창에서 확인할 수 있게 됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">\r\n\t\t\t\t4.2.1 Input 여러 개 다루기 (클래스형 컴포넌트)\r\n\t\t\t</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t우리는 input 값을 state에 넣는 방법을 배웠습니다. 하지만 input이 여러\r\n\t\t\t\t개일 때는 어떻게 작업할까요? 메서드를 여러 개 만들어야 할까요? 쉽게\r\n\t\t\t\t처리하는 방법이 있습니다. 바로 event 객체를 활용하는 것입니다.\r\n\t\t\t\te.target.name 값을 사용하면 됩니다. onChange 이벤트 핸들러에서\r\n\t\t\t\te.target.name은 해당 인풋의 name을 가리킵니다. 지금은 message 겠죠? 이\r\n\t\t\t\t값을 사용하여 state를 설정하면 쉽게 해결할 수 있습니다.\r\n\t\t\t\t<img src={EVENT3} alt=\"event3\" className=\"chapter__imgs\" />\r\n\t\t\t\t<img src={EVENT4} alt=\"event4\" className=\"chapter__imgs\" />\r\n\t\t\t\t여기서는 handleChange 코드가 핵심입니다.{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t객체 안에서 key를 [ ] 로 감싸면 그 안에 넣은 레퍼런스가 가리키는 실제\r\n\t\t\t\t\t값이 key값으로 사용됩니다.\r\n\t\t\t\t</b>\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">\r\n\t\t\t\t4.3 함수형 컴포넌트로 이벤트 여러 개 다루기\r\n\t\t\t</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t위 코드에서는 e.target.name 을 활용하지 않고 onChange 관련 함수 두 개를\r\n\t\t\t\t따로 만들어 주었습니다. 인풋이 두 개밖에 없다면 이런 코드도 나쁘지\r\n\t\t\t\t않습니다. 하지만 인풋의 개수가 많아질 것 같으면 e.target.name을 활용하는\r\n\t\t\t\t것이 더 좋을 수도 있습니다. <br />\r\n\t\t\t\t이번에는 useState를 통해 사용하는 상태에 문자열이 아닌 객체를\r\n\t\t\t\t넣어보겠습니다.\r\n\t\t\t\t<img src={EVENT7} alt=\"event7\" className=\"chapter__imgs\" />\r\n\t\t\t\t<img src={EVENT8} alt=\"event8\" className=\"chapter__imgs\" />\r\n\t\t\t\t<b>\r\n\t\t\t\t\te.target.name 값을 활용하려면, 위와 같이 useState를 쓸 때 인풋 값들이\r\n\t\t\t\t\t들어 있는 form 객체를 사용해 주면 됩니다.\r\n\t\t\t\t</b>\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">4.4 정리</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t함수형 컴포넌트에서 여러 개의 인풋 상태를 관리하기 위해 useState에서\r\n\t\t\t\tform 객체를 사용하는 방법도 배워 보았는데요, 우리가 8장에서 배울\r\n\t\t\t\tuseReducer와 커스텀 Hooks를 사용하면 이 작업을 훨씬 더 편하게 할 수도\r\n\t\t\t\t있습니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chapter4;\r\n","import React from 'react';\r\nimport ref1 from './imgs/chapter5/ref1.png';\r\nimport ref2 from './imgs/chapter5/ref2.png';\r\nimport ref3 from './imgs/chapter5/ref3.png';\r\nimport ref4 from './imgs/chapter5/ref4.png';\r\nimport ref5 from './imgs/chapter5/ref5.png';\r\n\r\nfunction Chapter5() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter 5, ref:DOM에 이름 달기</h1>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t일반 HTML에서 DOM 요소에 이름을 달 때는 id 선택자를 사용합니다. <br />\r\n\t\t\t\t특정 DOM 요소에 어떤 작업을 해야 할 때 이렇게 요소에 id를 달면 CSS에서\r\n\t\t\t\t특정 id에 특정 스타일을 적용하거나 자바스크립트에서 해당 id를 가진\r\n\t\t\t\t요소를 찾아서 작업할 수 있겠죠. 이렇게 HTML에서 id를 사용하여 DOM에\r\n\t\t\t\t이름을 다는 것처럼 리액트 프로젝트 내부에서 DOM에 이름을 다는 방법이\r\n\t\t\t\t있습니다. 바로 <b>ref (refrences)</b> 개념입니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b>리액트 컴포넌트 안에서는 id를 사용하면 안 되나요?</b>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t리액트 컴포넌트 안에서도 id를 사용할 수는 있습니다. JSX 안에 DOM에 id를\r\n\t\t\t\t달면 해당 DOM을 렌더링할 떄 그대로 전달합니다. 하지만 특수한 경우가\r\n\t\t\t\t아니면 사용을 권장하지 않습니다.{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t예를 들어 컴포넌트를 여러 번 사용한다고 가정해 보세요. HTML에서 DOM의\r\n\t\t\t\t\tid는 unique해야 하는데, 이런 상황에서는 중복 id를 가진 DOM이 여러 개\r\n\t\t\t\t\t생기니 잘못된 사용입니다. ref는 전역적으로 작동하지 않고 컴포넌트\r\n\t\t\t\t\t내부에서만 작동하기 때문에 이런 문제가 생기지 않습니다.\r\n\t\t\t\t</b>\r\n\t\t\t\t대부분 id를 사용하지 않고도 원하는 기능을 구현할 수 있지만, 다른\r\n\t\t\t\t라이브러리나 프레임워크와 함께 id를 사용해야 하는 상황이 발생할 수\r\n\t\t\t\t있습니다. 이런 상황에서는 컴포넌트를 만들 때마다 id 뒷부분에 추가\r\n\t\t\t\t텍스트를 붙여서(예: button01, button02, ....) 중복 id가 발생하는 것을\r\n\t\t\t\t방지해야 합니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">ref는 어떤 상황에서 사용해야 할까?</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t먼저 ref는 어떤 상황에 사용해야 하는지 제대로 짚고 넘어가 봅시다. 일단\r\n\t\t\t\t특정 DOM에 작업을 해야 할 때 ref를 사용한다는 것은 이미 파악했습니다.\r\n\t\t\t\t하지만 대체 어떤 작업을 할 때 ref를 사용해야 할까요?{' '}\r\n\t\t\t\t<b> 'DOM을 꼭 직접적으로 건드려야 할 때' 입니다.</b>\r\n\t\t\t\t하지만 리액트에서 이런 작업은 굳이 DOM에 접근하지 않아도 state로 구현할\r\n\t\t\t\t수 있습니다.\r\n\t\t\t\t<img src={ref1} alt=\"ref1\" className=\"chapter__imgs\" />\r\n\t\t\t\t<img src={ref2} alt=\"ref2\" className=\"chapter__imgs\" />\r\n\t\t\t\tinput 에서는 onChange 이벤트가 발생하면 handleChange를 호출하여 state의\r\n\t\t\t\tpassword 값을 업데이트하게 했습니다. button에서는 onClick 이벤트가\r\n\t\t\t\t발생하면 handleButtonClick을 호출하여 Clicked 값을 참으로 설정했고,\r\n\t\t\t\tvalidate 값을 검증 결과로 설정했습니다. <br />\r\n\t\t\t\tinput의 className 값은 버튼을 누르기 전에는 비어 있는 문자열을 전달하며,\r\n\t\t\t\t버튼을 누른 후 검증 경과에 따라 success 또는 failure 값을 설정합니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">5.2 ref 사용</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tref를 사용하는 방법은 두 가지입니다. 첫 번째는{' '}\r\n\t\t\t\t<b>콜백 함수를 통한 ref 설정</b>이고, 두 번째는{' '}\r\n\t\t\t\t<b>createRef를 통한 ref 설정</b>입니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">5.2.1 콜백 함수를 통한 ref 설정</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tref를 만드는 가장 기본적인 방법은 콜백 함수를 사용하는 것입니다. ref를\r\n\t\t\t\t달고자 하는 요소에 ref라는 콜백 함수를 props로 전달해 주면 됩니다. 이\r\n\t\t\t\t콜백 함수는 ref 값을 파라미터로 전달받습니다. 그리고 함수 내부에서\r\n\t\t\t\t파라미터로 받으 ref를 컴포넌트의 멤버 변수로 설정해 줍니다.\r\n\t\t\t\t<img src={ref3} alt=\"ref3\" className=\"chapter__imgs\" />\r\n\t\t\t\t이렇게 하면 앞으로 this.input은 input 요소의 DOM을 가리킵니다. ref\r\n\t\t\t\t이름은 원하는 것으로 자유롭게 지정할 수 있습니다. DOM 타입과 관계없이\r\n\t\t\t\tthis.superman = ref처럼 마음대로 지정합니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">5.2.2 createRef를 통한 ref 설정</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tref를 만드는 또 다른 방법은 리액트에 내장되어 있는 createRef라는 함수를\r\n\t\t\t\t사용하는 것입니다.\r\n\t\t\t\t<img src={ref4} alt=\"ref4\" className=\"chapter__imgs\" />\r\n\t\t\t\tcreateRef를 사용하여 ref를 만들려면 우선 컴포넌트 내부에서 멤버 변수로\r\n\t\t\t\tReact.createRef()를 담아 주어야 합니다. 그리고 해당 멤버 변수를 ref를\r\n\t\t\t\t달고자 하는 요소에 ref props로 넣어주면 설정이 완료됩니다. 설정한 뒤\r\n\t\t\t\t나중에 ref를 설정해 준 DOM에 접근하려면 this.input.current를 조회하면\r\n\t\t\t\t됩니다. 콜백함수를 사용할 때와 다른 점은 이렇게 뒷부분에 .current를 넣어\r\n\t\t\t\t주어야 한다는 것입니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">5.3 컴포넌트에 ref 달기</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트에서는 컴포넌트에도 ref를 달 수 있습니다. 이 방법은 주로 컴포넌트\r\n\t\t\t\t내부에 있는 DOM을 컴포넌트 외부에서 사용할 때 씁니다. 컴포넌트에 ref를\r\n\t\t\t\t다는 방법은 DOM에 ref를 다는 방법과 같습니다.\r\n\t\t\t\t<img src={ref5} alt=\"ref5\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t이렇게 하면 컴포넌트 내부의 메서드 및 멤버 변수에도 접근할 수 있습니다.\r\n\t\t\t\t즉, 내부의 ref에도 접근할 수 있습니다. (예: myComponent.handleClick,\r\n\t\t\t\tmyComponent.input 등..)\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">5.4 정리</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t컴포넌트 내부에서 DOM에 직접 접근해야 할 때는 ref를 사용합니다. 먼저\r\n\t\t\t\tref를 사용하지 않고도 원하는 기능을 구현할 수 이쓴지 반드시 고려한 후에\r\n\t\t\t\t활용하세요. <br />이 시점에서 오해할 수 있는 부분이 있는데, 서로 다른\r\n\t\t\t\t컴포넌트끼리 데이터를 교류할 때 ref를 사용한다면 이는 잘못된\r\n\t\t\t\t사용법입니다. 컴포넌트끼리 데이터를 교류할 때는 언제나 데이터를 부모와\r\n\t\t\t\t자식 흐름으로 교류해야 합니다. 함수형 컴포넌트에서는 useRef라는 훅\r\n\t\t\t\t함수를 사용합니다. 사용법은 이 장에서 배운 React.createRef와 유사합니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chapter5;\r\n","import React from 'react';\r\nimport map0 from './imgs/chapter6/map0.png';\r\nimport map1 from './imgs/chapter6/map1.png';\r\nimport map2 from './imgs/chapter6/map2.png';\r\nimport map3 from './imgs/chapter6/map3.png';\r\nimport map4 from './imgs/chapter6/map4.png';\r\nimport map5 from './imgs/chapter6/map5.png';\r\nimport map5_5 from './imgs/chapter6/map5_5.png';\r\nimport map6 from './imgs/chapter6/map6.png';\r\nimport map7 from './imgs/chapter6/map7.png';\r\n\r\nfunction Chapter6() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter6 컴포넌트 반복</h1>\r\n\t\t\t<h2 className=\"chapter__sub\">6.1 자바스크립트 배열의 map 함수</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t자바스크립트 배열 객체의 내장 함수인 map함수를 사용하여 반복되는\r\n\t\t\t\t컴포넌트를 렌더링할 수 있습니다. map 함수는 파라미터로 전달된 함수를\r\n\t\t\t\t사용해서 배열 내 각 요소를 원하는 규칙에 따라 변환한 후 그 결과로 새로운\r\n\t\t\t\t배열을 생성합니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">6.1.1 문법</h3>\r\n\t\t\t<b>arr.map(callback, [thisArg])</b>\r\n\r\n\t\t\t<p>이 함수의 파라미터는 다음과 같습니다.</p>\r\n\t\t\t<ul>\r\n\t\t\t\t{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t1. call back: 새로운 배열의 요소를 생성하는 함수로 파라미터는 다음 세\r\n\t\t\t\t\t가지입니다.{' '}\r\n\t\t\t\t</b>\r\n\t\t\t\t<li className=\"inner_li\">- currentValue: 현재 처리하고 있는 요소</li>\r\n\t\t\t\t<li className=\"inner_li\">\r\n\t\t\t\t\t- index: 현재 처리하고 있는 요소의 index 값\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"inner_li\">- array: 현재 처리하고 있는 원본 배열</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t{' '}\r\n\t\t\t\t\t<b>2. thisArg(선택 항목): callback 함수 내부에서 사용할 this</b>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<img src={map0} alt=\"map0\" className=\"chapter__imgs\"></img>\r\n\t\t\t<h3 className=\"chapter__sub\">6.1.2 예제</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tES6 문법을 사용한 예제입니다. result 값을 콘솔에 찍으면 1,4,9,16,25 가\r\n\t\t\t\t나오겠죠?\r\n\t\t\t</p>\r\n\t\t\t<img src={map1} alt=\"map1\" className=\"chapter__imgs\"></img>\r\n\r\n\t\t\t<h2 className=\"chapter__sub\">\r\n\t\t\t\t6.2 데이터 배열을 컴포넌트 배열로 변환하기\r\n\t\t\t</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<img src={map2} alt=\"map2\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t문자열로 구성된 배열을 선언합니다. 그 배열 값을 사용하여 li태그 안의 JSX\r\n\t\t\t\t코드로 된 배열을 새로 생성한 후 nameList에 넣습니다. <br />\r\n\t\t\t\t원하는 대로 렌더링이 되었지만, 콘솔창을 확인해보면 완벽하지 않습니다.\r\n\t\t\t\tkey 값이 없다는 경고 메세지를 볼 수 있을 겁니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">6.3 key</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트에서 key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이\r\n\t\t\t\t있었는지 알아내려고 사용합니다. 예를 들어 유동적인 데이터를 다룰 때는\r\n\t\t\t\t원소를 새로 생성할 수도, 제거할 수도, 수정할 수도 있습니다. key가 없을\r\n\t\t\t\t때는 Virtual DOM을 비교하는 과정에서 리스트를 순차적으로 비교하면서\r\n\t\t\t\t변화를 감지합니다. 하지만 key가 있다면 이 값을 사용하여 어떤 변화가\r\n\t\t\t\t일어났느지 더욱 빠르게 알아낼 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">6.3.1 key 설정</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tkey 값을 설정할 때는 map 함수의 인자로 전달되는 함수 내부에서 컴포넌트\r\n\t\t\t\tprops를 설정하듯이 설정하면 됩니다.{' '}\r\n\t\t\t\t<b>key 값은 언제나 유일해야 합니다.</b> 따라서 데이터가 가진 고윳값을\r\n\t\t\t\tkey 값으로 설정해야 합니다. 예를 들어 다음과 같이 게시판의 게시물을\r\n\t\t\t\t렌더링한다면 게시물 번호를 key 값으로 설정해야 합니다. 하지만, 앞서\r\n\t\t\t\t만들었던 예제 컴포넌트에는 이런 고유 번호가 없습니다. 이때는 map 함수에\r\n\t\t\t\t전달되는 콜백 함수의 인수인 index 값을 사용하면 됩니다.\r\n\t\t\t\t<img src={map3} alt=\"map3\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t현재는 고유한 값인 id가 없기 때문에 index를 키값으로 주었지만,{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\tindex를 키값으로 사용하면 배열이 변경될 때 효율적으로 리렌더링하지\r\n\t\t\t\t\t못합니다.\r\n\t\t\t\t</b>\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">6.4 응용</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t지금까지 배운 개념을 응용하여 고정된 배열을 렌더링하는 것이 아닌, 동적인\r\n\t\t\t\t배열을 렌더링하는 것을 구현해 보겠습니다. 그리고 index 값을 key로\r\n\t\t\t\t사용하면 리렌더링이 비효율적이라고 했는데, 이러한 상황에 어떻게 고윳값을\r\n\t\t\t\t만들 수 있는지 알아보겠습니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">6.4.1 초기 상태 설정하기</h3>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tIteratopm 컴포넌트에서 useState를 사용하여 상태를 설정하겠습니다. 세\r\n\t\t\t\t가지 상태를 사용할 텐데 하나는 <b>데이터 배열</b>이고, 다른 하나는{' '}\r\n\t\t\t\t<b>텍스트를 입력할 수 있는 input의 상태</b>입니다. 마지막 하나는{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t데이터 배열에서 새로운 항목을 추가할 때 사용할 고유한 id를 위한 상태\r\n\t\t\t\t</b>\r\n\t\t\t\t입니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">6.4.2 데이터 추가 기능 구현하기</h3>\r\n\t\t\t<img src={map4} alt=\"map4\" className=\"chapter__imgs\"></img>\r\n\t\t\t<img src={map5} alt=\"map5\" className=\"chapter__imgs\"></img>\r\n\t\t\t<p>\r\n\t\t\t\t배열에 새 항목을 추가할 때 배열의 push 함수를 사용하지 않고 concat을\r\n\t\t\t\t사용했는데요, push 함수는 기존 배열 자체를 변경해 주는 반면, concat은\r\n\t\t\t\t새로운 배열을 만들어 준다는 차이점이 있습니다.{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t리액트에서 상태를 업데이트할 때는 기존 상태를 그대로 두면서 새로운\r\n\t\t\t\t\t값을 상태로 설정해야 합니다.\r\n\t\t\t\t</b>{' '}\r\n\t\t\t\t이를 <b>불변성 유지</b>라고 하는데요, 불변성 유지를 해 주어야 나중에\r\n\t\t\t\t리액트 컴포넌트의 성능을 최적화할 수 있습니다. onClick 함수에서 새로운\r\n\t\t\t\t항목을 추가할 때 객체의 id 값은 nextId를 사용하도록 하고, 클릭될 때 마다\r\n\t\t\t\t값이 1씩 올라가도록 구현했습니다. 추가로 button이 클릭될 때 기존의 input\r\n\t\t\t\t내용을 비우는 것도 구현해 주었습니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">6.4.2 데이터 제거 기능 구현하기</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이번에는 각 항목을 더블 클릭했을 때 해당 항목이 화면에서 사라지는 기능을\r\n\t\t\t\t구현해 보겠습니다. 이번에도 마찬가지로 불변성을 유지하면서 업데이트해\r\n\t\t\t\t주어야 합니다. 불변성을 유지하면서 배열의 특정 항목을 지울 때는 배열의\r\n\t\t\t\t내장 함수 filter를 사용합니다.\r\n\t\t\t\t<img src={map5_5} alt=\"map5_5\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t이제 filter 함수를 사용하여 IterationSample 컴포넌트의 항목 제거 기능을\r\n\t\t\t\t구현해 봅시다.\r\n\t\t\t\t<img src={map6} alt=\"map6\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t<img src={map7} alt=\"map7\" className=\"chapter__imgs\"></img>\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chapter6;\r\n","import React from 'react';\r\nimport ls1 from './imgs/chapter7/ls1.png';\r\nimport ls2 from './imgs/chapter7/ls2.png';\r\nimport ls3 from './imgs/chapter7/ls3.png';\r\n\r\nfunction Chapter7() {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter7, 라이프 사이클 메소드 이해하기</h1>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t모든 리액트 컴포넌트에는 라이프사이클(수명주기)이 존재합니다.{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t컴포넌트의 수명은 페이지에 렌더링되기 전인 준비 과정에서 시작하여\r\n\t\t\t\t\t페이지에서 사라질 때 끝납니다.\r\n\t\t\t\t</b>{' '}\r\n\t\t\t\t리액트 프로젝트를 진행하다 보면 가끔 컴포넌트를 처음으로 렌더링할 때\r\n\t\t\t\t어떤 작업을 처리해야 하거나 컴포넌트를 업데이트하기 전후로 어떤 작업을\r\n\t\t\t\t처리해야 할 수도 있고, 또 불필요한 업데이트를 방지해야 할 수도 있습니다.{' '}\r\n\t\t\t\t<br />\r\n\t\t\t\t이때는 라이프 사이클 메소드를 사용합니다. 참고로{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t라이프사이클 메소드는 클래스형 컴포넌트에서만 사용할 수 있습니다.\r\n\t\t\t\t</b>{' '}\r\n\t\t\t\t함수형 컴포넌트에서는 사용할 수 없는데요, 그 대신에 Hooks 라는 기능을\r\n\t\t\t\t사용하여 비슷한 작업을 처리할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">라이프사이클 메서드의 이해</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t라이프사이클 메서드의 종류는 총 아홉 가지입니다. <b>Will</b> 접두사가\r\n\t\t\t\t붙은 메서드는 어떤 <b>작업을 작동하기 전에 실행</b>되는 메서드이고,{' '}\r\n\t\t\t\t<b>Did</b> 접두사가 붙은 메서드는 어떤 <b>작업을 작동한 후에 실행</b>\r\n\t\t\t\t되는 메서드입니다. 이 메서드들은 우리가 컴포넌트 클래스에서 덮어 써\r\n\t\t\t\t선언함으로써 사용할 수 있습니다. 라이프 사이클은 총 세 가지,{' '}\r\n\t\t\t\t<b>마운트, 언마운트, 업데이트</b> 카테고리로 나눕니다.\r\n\t\t\t\t<img src={ls1} alt=\"ls1\" className=\"chapter__imgs\" />\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">마운트</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tDOM이 생성되고 웹 브라우저상에 나타나는 것을 마운트라고 합니다. 마운트\r\n\t\t\t\t시에는 호출하는 메서드가 차례대로 나옵니다.\r\n\t\t\t</p>\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- constructor: 컴포넌트를 새로 만들때마다 호출되는 클래스 생성자\r\n\t\t\t\t\t메서드\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- getDerivedStateFromProps: props에 있는 값을 state에 넣을 때 사용하는\r\n\t\t\t\t\t메서드\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"big\">- render: 우리가 준비한 UI를 렌더링하는 메서드</li>\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- componentDidMount: 컴포넌트가 웹 브라우저상에 나타난 후 호출하는\r\n\t\t\t\t\t메서드\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2 className=\"chapter__sub\">업데이트</h2>\r\n\t\t\t컴포넌트는 다음과 같은 총 네가지 경우에 업데이트합니다.\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"big\">1. props가 바뀔 때</li>\r\n\t\t\t\t<li className=\"big\">2. state가 바뀔 때</li>\r\n\t\t\t\t<li className=\"big\">3. 부모 컴포넌트가 리렌더링될 때</li>\r\n\t\t\t\t<li className=\"big\">4. this.forceUpdate로 강제 렌더링을 트리거할 때</li>\r\n\t\t\t</ul>\r\n\t\t\t이렇게 컴포넌트를 업데이트할 때는 다음 메서드를 호출합니다.\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- getDerivedStateFromProps: 마운트에서도 호출되는 메서드. props의\r\n\t\t\t\t\t변화에 따라 state에도 변화를 주고 싶을 때 사용한다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- shouldComponentUpdate: 컴포넌트가 리렌더링을 해야 할지 말아야 할지\r\n\t\t\t\t\t결정한다. true, false 값을 반환해야 하며, false를 반환하면 작업을\r\n\t\t\t\t\t중지하고, 컴포넌트가 리렌더링 되지 않는다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- render: 컴포넌트를 리렌더링한다. this.forceUpdate 함수를 호출하면\r\n\t\t\t\t\t앞의 과정을 생략하고 바로 render 함수를 호출한다\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- getSnapshotBeforeUpdate: 컴포넌트 변화를 DOM에 반영하기 직전에\r\n\t\t\t\t\t호출한다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"big\">\r\n\t\t\t\t\t- componentDidUpdate: 컴포넌트의 업데이트 작업이 끝난 후 호출한다.\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2 className=\"chapter__sub\">언마운트</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t마운트의 반대 과정, 즉 컴포넌트를 DOM에서 제거하는 것을 언마운트라고\r\n\t\t\t\t합니다.\r\n\t\t\t</p>\r\n\t\t\t<img src={ls2} alt=\"ls2\" className=\"chapter__imgs_w100\" />\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t라이프 사이클 메서드는 컴포넌트 상태에 변화가 있을 때마다 실행하는\r\n\t\t\t\t메서드입니다. 이 메서드들은 서드파티 라이브러리를 사용하거나, DOM을 직접\r\n\t\t\t\t건드려야할 때 유용하게 사용됩니다. 추가로 컴포넌트 업데이트의 성능을\r\n\t\t\t\t개선할 때는 shouldComponentUpdate가 중요하게 사용됩니다.\r\n\t\t\t\t<br /> shouldComponentUpdate를 사용하여 컴포넌트의 업데이트 성능을\r\n\t\t\t\t개선하는 내용은 11장에서 다루겠습니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chpater__sub\">라이프사이클 메서드 살펴보기</h2>\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.1. render() 함수</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이 메서드는 모양새를 정의합니다. 그렇기에 컴포넌트에서 가장 중요한\r\n\t\t\t\t메서드라고 할 수 있습니다. 라이프사이클 메서드 중 유일한 필수\r\n\t\t\t\t메서드이기도 합니다. 이 메서드 안에서 this.props와 this.state에 접근할\r\n\t\t\t\t수 있으며, 리액트 요소를 반환합니다. 요소는 div 같은 태그가 될 수도\r\n\t\t\t\t있고, 따로 선언한 컴포넌트가 될 수도 있습니다. 아무것도 보여 주고 싶지\r\n\t\t\t\t않다면 null 값이나 false 값을 반환하도록 하세요. 그리고 다음 사항에\r\n\t\t\t\t주의하세요.{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\t이 메서드 안에서는 이벤트 설정이 아닌 곳에서 setState를 사용하면 안\r\n\t\t\t\t\t되며, 브라우저의 DOM에 접근해서도 안 됩니다.\r\n\t\t\t\t</b>{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\tDOM 정보를 가져오거나 state에 변화를 줄 때는 componentDidMount에서\r\n\t\t\t\t\t처리해야 합니다.\r\n\t\t\t\t</b>\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.2. constructor 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이 메서드는 컴포넌트의 생성자 메서드로 컴포넌트를 만들 때 처음으로\r\n\t\t\t\t실행됩니다. 이 메서드에서는 초기 state를 설정할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.3. getDerivedStateFromProps 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이것은 리액트 v16.3 이후에 새로 만든 라이프사이클 메서드입니다. props로\r\n\t\t\t\t받아 온 값을 state에 동기화시키는 용도로 사용하며, 컴포넌트가 마운트될\r\n\t\t\t\t때와 업데이트 될 때 호출됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.4. componentDidMount 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이것은 컴포넌트를 만들고, 첫 렌더링을 다 마친 후 실행합니다. 이 안에서\r\n\t\t\t\t다른 자바스크립트 라이브러리 또는 프레임워크의 함수를 호출하거나 이벤트\r\n\t\t\t\t등록, setTimeout, setInterval, 네트워크 요청과 같은 비동기 작업을\r\n\t\t\t\t처리합니다.\r\n\t\t\t</p>{' '}\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.5. shouldComponentUpdate 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이것은 props 또는 state를 변경했을 때, 리렌더링을 시작할지 여부를\r\n\t\t\t\t지정하는 메서드입니다. 이 메서드에서는 반드시 true 값 또는 false값을\r\n\t\t\t\t반환해야 합니다. 컴포넌트를 만들 때 이 메서드를 따로 생성하지 않으면\r\n\t\t\t\t기본적으로 언제나 true 값을 반환합니다. 이 메서드가 false 값을\r\n\t\t\t\t반환한다면 업데이트 과정은 여기서 중지합니다. 이 메서드 안에서 현재\r\n\t\t\t\tprops와 state는 this.props 와 this.state로 접근하고, 새로 설정될 props\r\n\t\t\t\t또는 state는 nextProps의 nextState로 접근할 수 있습니다. 프로젝트 성능을\r\n\t\t\t\t최적화할 때, 상황에 맞는 알고리즘을 작성하여 리렌더링을 방지할 때는\r\n\t\t\t\tfalse값을 반환하게 합니다. 컴포넌트를 최적화하는 부분은 앞으로 리액트를\r\n\t\t\t\t공부하면서 더 자세히 알아보겠습니다.\r\n\t\t\t</p>{' '}\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.6. getSnapshotBeforeUpdate 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이것은 리액트 v16.3 이후 만든 메서드입니다. 이 메서드는 render에서\r\n\t\t\t\t만들어진 결과물이 브라우저에 실제로 반영되기 직전에 호출됩니다. 이\r\n\t\t\t\t메서드에서 반환하는 값은 componentDidMount에서 세 번째 파라미터인\r\n\t\t\t\tsnapshot 값으로 전달받을 수 있는데요, 주로 업데이트하기 직전의 값을\r\n\t\t\t\t참고할 일이 있을 때 활용됩니다.\r\n\t\t\t</p>{' '}\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.7. componentDidUpdate 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이것은 리렌더링을 완료한 후 실행합니다. 업데이트가 끝난 직후이므로, DOM\r\n\t\t\t\t관련 처리를 해도 무방합니다. 여기서는 prevProps 또는 prevState를\r\n\t\t\t\t사용하여 컴포넌트가 이전에 가졌던 데이터에 접근할 수 있습니다. 또는\r\n\t\t\t\tgetSnapshotBeforeUpdate에서 반환한 값이 있다면 여기서 snapshot 값을\r\n\t\t\t\t전달받을 수 있습니다.{' '}\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.8. componenetWillUnMount 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\t이것은 컴포넌트를 DOM에서 제거할 때 실행합니다. componenetDidMount에서\r\n\t\t\t\t등록한 이벤트, 타이머, 직접 생성한 DOM이 있다면 여기서 제거 작업을 해야\r\n\t\t\t\t합니다.\r\n\t\t\t</p>\r\n\t\t\t<h3 className=\"chapter__sub\">7.2.9. componentDidCatch 메서드</h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\tcomponentDidCatch 메서드는 리애그 v16에서 새롭게 도입되었으며, 컴포넌트\r\n\t\t\t\t렌더링 도중에 에러가 발생했을 때 애플리케이션이 먹통이 되지 않고 오류\r\n\t\t\t\tUI를 보여 줄 수 있게 해줍니다. 사용 방법은 다음과 같습니다.\r\n\t\t\t\t<img src={ls3} alt=\"ls3\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t여기서 error는 파라미터에 어떤 에러가 발생했는지 알려 주며, info\r\n\t\t\t\t파라미터는 어디에 있는 코드에서 오류가 발생했는지에 대한 정보를 줍니다.\r\n\t\t\t\t앞의 코드에서는 그저 console.log 만 했지만, 나중에 실제로 사용할 때\r\n\t\t\t\t오류가 발생하면 서버 API를 호출하여 따로 수집할 수도 있습니다. <br />\r\n\t\t\t\t그러나 이 메서드를 사용할 때는 컴포넌트 자신에게 발생하는 에러를 잡아낼\r\n\t\t\t\t수 없고 자신의 this.props.children으로 전달되는 컴포넌트에서 발생하는\r\n\t\t\t\t에러만 잡아낼 수 있다는 점을 알아두어야 합니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chapter7;\r\n","import React from 'react';\r\nimport hook1 from './imgs/chapter8/hook1.png';\r\nimport hook2 from './imgs/chapter8/hook2.png';\r\nimport hook3 from './imgs/chapter8/hook3.png';\r\nimport hook4 from './imgs/chapter8/hook4.png';\r\nimport hook5 from './imgs/chapter8/hook5.png';\r\nimport hook6 from './imgs/chapter8/hook6.png';\r\nimport hook7 from './imgs/chapter8/hook7.png';\r\nimport hook8 from './imgs/chapter8/hook8.png';\r\nimport hook9 from './imgs/chapter8/hook9.png';\r\nimport hook10 from './imgs/chapter8/hook10.png';\r\nimport hook11 from './imgs/chapter8/hook11.png';\r\n\r\nconst Chapter8 = () => {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter8, Hooks</h1>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tHooks는 리액트 v16.8에 새로 도입된 기능으로 함수형 컴포넌트에서도 상태\r\n\t\t\t\t관리를 할 수 있는 useState, 렌더링 직후 작업을 설정하는 useEffect 등의\r\n\t\t\t\t기능을 제공하여 기존의 함수형 컴포넌트에서 할 수 없었던 다양한 작업을 할\r\n\t\t\t\t수 있게 해줍니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">8.1 useState</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tuseState는 가장 기본적인 Hook이며, 함수형 컴포넌트에서도 가변적인 상태를\r\n\t\t\t\t지닐 수 있게 해줍니다. 3장에서도 이미 사용해 보았는데, 이번 장에서 다시\r\n\t\t\t\t복습해 봅시다. 만약 함수형 컴포넌트에서 상태를 관리해야 한다면 이 Hook을\r\n\t\t\t\t사용하면 됩니다.\r\n\t\t\t\t<img src={hook1} alt=\"hook1\" className=\"chapter__imgs\"></img>\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">8.2 useEffect</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tuseEffect는 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록\r\n\t\t\t\t설정할 수 있는 Hook입니다. 클래스형 컴포넌트의 <b>componentDidMount</b>\r\n\t\t\t\t와 <b>componentDidUpdate</b>가 합쳐진 형태로 보아도 무방합니다. 기존에\r\n\t\t\t\t만들었던 컴포넌트에 useEffect를 적용해 보겠습니다.\r\n\t\t\t\t<img src={hook2} alt=\"hook2\" className=\"chapter__imgs\"></img>\r\n\t\t\t\t<img src={hook3} alt=\"hook3\" className=\"chapter__imgs\"></img>\r\n\t\t\t\tuseEffect를 통해 특정 벨류값이 업데이트될 때 마다 콘솔창에서 표기해줄 수\r\n\t\t\t\t있습니다. 해당 파일에서는 Input으로 name과 nickname을 받았는데, name의\r\n\t\t\t\t값(밸류)가 업데이트 될 때마다 useEffect를 실행하도록 하였습니다.\r\n\t\t\t\tuseEffect 함수의 맨 마지막 부분을 보면 배열에 [name]이 담겨 있음을 알 수\r\n\t\t\t\t있습니다. 위와 같이 []배열에 들어가는 값이 업데이트\r\n\t\t\t\t(componentDidUpdate)될 때마다 콘솔창에 표기할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tuseEffect는 기본적으로 렌더링되고 난 직후마다 실행되며, 두 번째 파라미터\r\n\t\t\t\t배열에 무엇을 넣는지에 따라 실행되는 조건이 달라집니다. 컴포넌트가\r\n\t\t\t\t언마운트되기 전이나 업데이트되기 직전에 어떠한 작업을 수행하고 싶다면\r\n\t\t\t\tuseEffect에서 뒷정리(cleanup) 함수를 반환해 주어야 합니다. return ()\r\n\t\t\t\t함수를 통해 콘솔창에 'cleanup' 이라는 문자열을 찍어주었습니다. 렌더링이\r\n\t\t\t\t될 때마다 뒷정리 함수가 계속 나타나는 것을 확인할 수 있습니다. 그리고\r\n\t\t\t\t뒷정리 함수가 호출될 때는 업데이트가 되기 직전의 값을 보여줍니다. 오직\r\n\t\t\t\t언마운트될 때만 뒷정리 함수를 호출하고 싶다면 useEffect 함수의 두 번째\r\n\t\t\t\t파라미터에 비어 있는 배열을 넣으면 됩니다.{' '}\r\n\t\t\t</p>\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t[], 빈 괄호이면 오직 언마운트 시에만 실행\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t[name], 이라면 name 값에 변화가 있을 때(update)마다 실행\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2 className=\"chapter__sub\">8.3 useReducer</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t<b>\r\n\t\t\t\t\tuseReducer는 useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를\r\n\t\t\t\t\t다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook입니다.\r\n\t\t\t\t</b>{' '}\r\n\t\t\t\t리듀서는 현재 상태, 그리고 업데이트를 위해 필요한 정보를 담은\r\n\t\t\t\t액션(action)값을 전달받아서 새로운 상태를 반환하는 함수입니다. 리듀서\r\n\t\t\t\t함수에서 새로운 상태를 만들 때는 반드시 불변성을 지켜 주어야 합니다.\r\n\t\t\t\t<img src={hook4} alt=\"hook4\" className=\"chapter__imgs\" />\r\n\t\t\t\t<b>\r\n\t\t\t\t\tuseReducer의 첫 번째 파라미터에는 (우리가 만든) 리듀서 함수를 넣고, 두\r\n\t\t\t\t\t번째 파라미터에는 해당 리듀서의 기본 값 (초기 값)을 지정해 줍니다.{' '}\r\n\t\t\t\t</b>\r\n\t\t\t\t이 Hook을 사용하면 state 값과 dispatch 함수를 받아 오는데요, 여기서\r\n\t\t\t\tstate는 현재 가리키고 있는 상태고, dispatch는 액션을 방생시키는\r\n\t\t\t\t함수입니다. dispatch(action)과 같은 형태로, 함수 안에 파라미터로 액션\r\n\t\t\t\t값을 넣어 주면 리듀서 함수가 호출되는 구조입니다.{' '}\r\n\t\t\t\t<b>\r\n\t\t\t\t\tuseReducer를 사용했을 때의 가장 큰 장점은 컴포넌트 업데이트 로직을\r\n\t\t\t\t\t컴포넌트 바깥으로 빼낼 수 있다는 것입니다.\r\n\t\t\t\t</b>\r\n\t\t\t</p>\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"chapter__li\">- state: 현재 가리키고 있는 상태</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t- dispatch(action): 액션을 발생시키는 함수\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t- 액션은 reducer에서 특정조건(switch)문을 통해 만든 case문이다.\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h3 className=\"chapter__sub\">8.3.2 인풋 상태 관리하기 </h3>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\tuseReducer를 사용하여 Info 컴포넌트에서 인풋 상태를 관리해 보겠습니다.\r\n\t\t\t\t기존에는 인풋이 여러 개여서 useState를 여러 번 사용했는데요,\r\n\t\t\t\tuseReducer를 사용하면 기존에 클래스형 컴포넌트에서 input태그에 name값을\r\n\t\t\t\t할당하고 e.target.name 을 참조하여 useState를 해 준 것과 유사한 방식으로\r\n\t\t\t\t작업을 처리할 수 있습니다.\r\n\t\t\t\t<img src={hook5} alt=\"hook5\" className=\"chapter__imgs\" />\r\n\t\t\t\tuseReducer에서의 액션은 그 어떤 값도 사용 가능합니다. 그래서 이번에는\r\n\t\t\t\t이벤트 객체가 지니고 있는 e.target 값 자체를 액션 값으로 사용했습니다.\r\n\t\t\t\t이런 식으로 인풋을 관리하면 아무리 인풋의 개수가 많아져도 코드를 짧고\r\n\t\t\t\t깔끔하게 유지할 수 있습니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">8.4 useMemo</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tuseMemo를 사용하면 함수형 컴포넌트 내부에서 발생하는 연산을 최적화할 수\r\n\t\t\t\t있습니다. 먼저 리스트에 숫자를 추가하면 추가된 숫자들의 평균을 보여주는\r\n\t\t\t\t함수형 컴포넌트를 작성해 봅시다.\r\n\t\t\t\t<img src={hook6} alt=\"hook6\" className=\"chapter__imgs\" />\r\n\t\t\t\t<img src={hook7} alt=\"hook7\" className=\"chapter__imgs\" />\r\n\t\t\t\t하지만 이렇게 되면 숫자를 등록할 때뿐만 아니라, 인풋 내용이 수정될 때도\r\n\t\t\t\t우리가 만든 getAverage 함수가 호출되는 것을 확인할 수 있습니다. 인풋\r\n\t\t\t\t내용이 바뀔 때는 평균값을 다시 계산할 필요가 없는데, 이렇게 렌더링할\r\n\t\t\t\t때마다 계산하는 것은 낭비입니다.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t{' '}\r\n\t\t\t\t따라서 useMemo를 사용하면 이러한 작업을 최적화할 수 있습니다. 렌더링하는\r\n\t\t\t\t과정에서 특정 값이 바뀌었을 때만 연산을 실행하고, 원하는 값이 바뀌지\r\n\t\t\t\t않았다면 이전에 연산했던 결과를 다시 사용하는 방식입니다.\r\n\t\t\t\t<img src={hook8} alt=\"hook8\" className=\"chapter__imgs\" />\r\n\t\t\t\t<img src={hook9} alt=\"hook9\" className=\"chapter__imgs\" />\r\n\t\t\t\tuseMemo 또한 useEffect의 형식과 같이 마운트시에만 렌더링 시키기 위해서\r\n\t\t\t\t배열([ ])안에 해당 내용을 작성합니다. 따라서 현재는 list 배열의 내용이\r\n\t\t\t\t바뀔 때만 getAverage 함수가 호출됩니다.\r\n\t\t\t</p>\r\n\r\n\t\t\t<h2 className=\"chpater__sub\">8.5 useRef</h2>\r\n\t\t\t<p className=\"chpater__contents\">\r\n\t\t\t\tuseRef Hook은 함수형 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해 줍니다.\r\n\t\t\t\tAverage 컴포넌트에서 등록 버튼을 눌렀을 때 포커스가 인풋 쪽으로\r\n\t\t\t\t넘아가도록 코드를 작성해 보겠습니다.\r\n\t\t\t\t<img src={hook10} alt=\"hook10\" className=\"chapter__imgs\" />\r\n\t\t\t\t<img src={hook11} alt=\"hook11\" className=\"chapter__imgs\" />\r\n\t\t\t\tuseRef를 사용하여 ref를 설정하면 useRef를 통해 만든 객체 안의 current\r\n\t\t\t\t값이 실제 엘리먼트를 가리킵니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트 메뉴얼에 따르면, 기존의 클래스형 컴포넌트는 앞으로도 계속해서\r\n\t\t\t\t지원될 예정입니다. 그렇기 때문에 만약 유지 보수하고 있는 프로젝트에서\r\n\t\t\t\t클래스형 컴포넌트를 사용하고 있다면, 이를 굳이 함수형 컴포넌트와 Hooks를\r\n\t\t\t\t사용하는 형태로 전환할 필요는 없습니다. 다만, 메뉴얼에서는 새로 작성하는\r\n\t\t\t\t컴포넌트의 경우 함수형 컴포넌트와 Hooks를 사용할 것을 권장하고 있습니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Chapter8;\r\n","import React from 'react';\r\nimport './Chapter.css';\r\nimport css1 from './imgs/chapter9/css1.png';\r\nimport css2 from './imgs/chapter9/css2.png';\r\nimport css3 from './imgs/chapter9/css3.png';\r\nimport css4 from './imgs/chapter9/css4.png';\r\n\r\nconst Chapter9 = () => {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Chapter 9, 컴포넌트 스타일링</h1>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t리액트에서 컴포넌트를 스타일링할 때는 다양한 방식을 사용할 수 있습니다.\r\n\t\t\t\t여러 방식 중에서 딱히 정해진 방식이란 없기 때문입니다. 회사마다 요구하는\r\n\t\t\t\t스펙이 다르고, 개발자마다 각자 취향에 따라 선택하기 때문입니다. 이\r\n\t\t\t\t장에서는 어떠한 방식이 있는지 알아보고, 자주 사용하는 방식을 하나하나\r\n\t\t\t\t사용해 보겠습니다.\r\n\t\t\t</p>\r\n\t\t\t<ul className=\"chapter__ul\">\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t이 장에서 알아볼 스타일링 방식은 다음과 같습니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t- 일반 CSS: 컴포넌트를 스타일링하는 가장 기본적인 방식입니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t- Sass: 자주 사용되는 CSS 전처리(pre-processor)중 하나로 확장된 CSS\r\n\t\t\t\t\t문법을 사용하여 CSS 코드를 더욱 쉽게 작성할 수 있도록 해 줍니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t- CSS Module: 스타일을 작성할 때 CSS 클래스가 다른 CSS 클래스의 이름과\r\n\t\t\t\t\t절대 충돌하지 않도록 파일마다 고유한 이름을 자동으로 생성해 주는\r\n\t\t\t\t\t옵션입니다.\r\n\t\t\t\t</li>\r\n\t\t\t\t<li className=\"chapter__li\">\r\n\t\t\t\t\t- styled-components: 스타일을 자바스크립트 파일에 내장시키는 방식으로\r\n\t\t\t\t\t스타일을 작성함과 동시에 해당 스타일이 적용된 컴포넌트를 만들 수 있게\r\n\t\t\t\t\t해줍니다.\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2 className=\"chapter__sub\">9.1 Sass 사용하기</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tSass(Syntactically Awesome style sheeys)(문법적으로 매우 멋진\r\n\t\t\t\t스타일시트)는 CSS 전처리기로 복잡한 작업을 쉽게 할 수 있도록 해 주고,\r\n\t\t\t\t스타일 코드의 재활용성을 높여 줄 뿐만 아니라 코드의 가독성을 높여서 유지\r\n\t\t\t\t보수를 더욱 쉽게 해 줍니다.\r\n\t\t\t</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tcreate-react-app 구버전에서는 Sass를 사용하려면 추가 작업이 필요했는데,\r\n\t\t\t\tv2 버전부터는 별도의 추가 설정 없이 바로 사용할 수 있습니다. Sass에서는\r\n\t\t\t\t두 가지 확장자 .scss와 .sass를 지원합니다. Sass가 처음 나왔을 때는 .sass\r\n\t\t\t\t확장자만 지원되었으나 나중에 개발자들의 요청에 의해 .scss 확장자도\r\n\t\t\t\t지원하게 되었습니다.\r\n\t\t\t</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<b>아래의 이미지는 .sass 표기법의 예시입니다.</b>\r\n\t\t\t\t\t<img src={css1} alt=\"css1\" className=\"chapter__imgs\" />\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<b>아래의 이미지는 .scss 표기법의 예시입니다.</b>\r\n\t\t\t\t\t<img src={css2} alt=\"css2\" className=\"chapter__imgs\" />\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t주요 차이점을 살펴보면, .sass 확장자는 중괄호와 세미콜론을 사용하지\r\n\t\t\t\t않습니다. 반면 .scss확장자는 기존 CSS를 작성하는 방식과 비교해서 문법이\r\n\t\t\t\t크게 다르지 않습니다. 보통 .scss 문법이 더 자주 사용됩니다.\r\n\t\t\t</p>\r\n\t\t\t<h2 className=\"chapter__sub\">9.2 CSS-Module 사용하기</h2>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\tCSS Module은 CSS를 불러와서 사용할 때 클래스 이름을 고유한 값, 즉 [파일\r\n\t\t\t\t이름]_[클래스 이름]_[해시값] 형태로 자동으로 만들어서 컴포넌트 스타일\r\n\t\t\t\t클래스 이름이 중첩되는 현상을 방지해 주는 기술입니다. CSS Module을\r\n\t\t\t\t사용하기 위해 구버전의 create-react-app 에서는 웹팩에서 css-loader\r\n\t\t\t\t설정을 별도로 해 주어야 했지만, v2 버전 이상부터는 따로 설정할 필요 없이\r\n\t\t\t\t.module.css 확장자로 파일을 저장하기만 하면 CSS Module이 적용됩니다.\r\n\t\t\t\t<img src={css3} alt=\"css3\" className=\"chapter__imgs\" />\r\n\t\t\t\tCSS Module을 사용하면 클래스 이름을 지을 때 그 고유성에 대해 고민하지\r\n\t\t\t\t않아도 됩니다. 흔히 사용하는 단어로 이름을 짓는다고 해도 전혀 문제가\r\n\t\t\t\t되지 않습니다. 해당 클래스는 우리가 방금 만든 스타일을 직접 불러온\r\n\t\t\t\t컴포넌트 내부에서만 작동하기 때문입니다. 만약 특정 클래스가 웹\r\n\t\t\t\t페이지에서 전역적으로 사용되는 경우라면 :global을 앞에 입력하여 글로벌\r\n\t\t\t\tCSS임을 명시해 줄 수 있습니다.\r\n\t\t\t\t<img src={css4} alt=\"css4\" className=\"chapter__imgs\" />\r\n\t\t\t\tCSS Module이 적용된 스타일 파일을 불러오면 객체를 하나 전달받게 되는데\r\n\t\t\t\tCSS Module에서 사용한 클래스 이름과 해당 이름을 고유화한 키-값 형태로\r\n\t\t\t\t들어 있습니다. 예를 들어 위 코드에서 console.log(styles)를 한다면 다음과\r\n\t\t\t\t같은 결과가 나타납니다.\r\n\t\t\t</p>\r\n\t\t\t<p>wrapper: \"CSSModule_wrapper_15bdQ\"</p>\r\n\t\t\t<p className=\"chapter__contents\">\r\n\t\t\t\t우리가 지정한 클래스 이름 앞뒤로 파일 이름과 해시값이 붙었습니다.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Chapter9;\r\n","import React, { useState } from 'react';\r\n\r\nconst Counter = () => {\r\n\tconst [value, setValue] = useState(0);\r\n\r\n\tconst style = {\r\n\t\tmarginRight: '3px',\r\n\t};\r\n\r\n\tconst onClickedDoublePlus = () => {\r\n\t\tsetValue(value * 2 + 1);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<p>\r\n\t\t\t\t현재 카운트 값은 <b>{value}</b>입니다.\r\n\t\t\t</p>\r\n\t\t\t<button style={style} onClick={() => setValue((value) => value + 1)}>\r\n\t\t\t\t1 더하기\r\n\t\t\t</button>\r\n\t\t\t<button style={style} onClick={() => setValue((value) => value - 1)}>\r\n\t\t\t\t1 빼기\r\n\t\t\t</button>\r\n\t\t\t<button style={style} onClick={() => setValue((value) => value * 2)}>\r\n\t\t\t\t2 곱하기\r\n\t\t\t</button>\r\n\t\t\t<button style={style} onClick={() => setValue((value) => value * 2 + 1)}>\r\n\t\t\t\t2 곱하고 1 더하기\r\n\t\t\t</button>\r\n\r\n\t\t\t<button style={style} onClick={onClickedDoublePlus}>\r\n\t\t\t\t{' '}\r\n\t\t\t\t2 곱하고 1 더하기\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Counter;\r\n","import React, { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'INCREMENT':\r\n\t\t\treturn { value: state.value + 1 };\r\n\t\tcase 'DECREMENT':\r\n\t\t\treturn { value: state.value - 1 };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst Counter_Reducer = () => {\r\n\tconst [state, dispatch] = useReducer(reducer, { value: 0 });\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1> useReducer를 이용한 Count 활용입니다.</h1>\r\n\t\t\t<p>\r\n\t\t\t\t현재 카운터 값은 <b>{state.value}</b> 입니다.\r\n\t\t\t</p>\r\n\t\t\t<button onClick={() => dispatch({ type: 'INCREMENT' })}>1 더하기</button>\r\n\t\t\t<button onClick={() => dispatch({ type: 'DECREMENT' })}>1 빼기</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Counter_Reducer;\r\n","import React, { useState } from 'react';\r\n\r\nconst Say = () => {\r\n\tconst [message, setMessage] = useState('');\r\n\tconst onClickEnter = () => setMessage('안녕하세요!');\r\n\tconst onClickLeave = () => setMessage('안녕히 가세요!');\r\n\r\n\tconst [color, setColor] = useState('black');\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<button onClick={onClickEnter}>입장</button>\r\n\t\t\t<button onClick={onClickLeave}>퇴장</button>\r\n\t\t\t<h1 style={{ color }}>{message}</h1>\r\n\r\n\t\t\t<button style={{ color: 'red' }} onClick={() => setColor('red')}>\r\n\t\t\t\t빨간색\r\n\t\t\t</button>\r\n\t\t\t<button style={{ color: 'green' }} onClick={() => setColor('green')}>\r\n\t\t\t\t초록색\r\n\t\t\t</button>\r\n\t\t\t<button style={{ color: 'blue' }} onClick={() => setColor('blue')}>\r\n\t\t\t\t파란색\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Say;\r\n","import React, { Component } from 'react';\r\nimport './ValidationSample.css';\r\n\r\nclass ValidationSample extends Component {\r\n\tstate = {\r\n\t\tpassword: '',\r\n\t\tclicked: false,\r\n\t\tvalidated: false,\r\n\t};\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tpassword: e.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\thandleButtonClick = () => {\r\n\t\tthis.setState({\r\n\t\t\tclicked: true,\r\n\t\t\tvalidated: this.state.password === '0000',\r\n\t\t});\r\n\t\tthis.input.focus();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"wrap\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tref={(ref) => (this.input = ref)}\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tvalue={this.state.password}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\tclassName={\r\n\t\t\t\t\t\tthis.state.clicked\r\n\t\t\t\t\t\t\t? this.state.validated\r\n\t\t\t\t\t\t\t\t? 'success'\r\n\t\t\t\t\t\t\t\t: 'failure'\r\n\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<button onClick={this.handleButtonClick}>검증하기</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ValidationSample;\r\n","import React, { useState } from 'react';\r\n\r\nconst Input = () => {\r\n\tconst [username, setUsername] = useState('');\r\n\tconst [message, setMessage] = useState('');\r\n\r\n\tconst onChangeUsername = (e) => setUsername(e.target.value);\r\n\tconst onChangeMessage = (e) => setMessage(e.target.value);\r\n\r\n\tconst onClick = () => {\r\n\t\talert(username + ' : ' + message);\r\n\t\tsetUsername('');\r\n\t\tsetMessage('');\r\n\t};\r\n\r\n\tconst onKeyPress = (e) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tonClick();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1>이벤트 연습</h1>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"username\"\r\n\t\t\t\tplaceholder=\"사용자명\"\r\n\t\t\t\tvalue={username}\r\n\t\t\t\tonChange={onChangeUsername}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"message\"\r\n\t\t\t\tplaceholder=\"아무거나 입력해 보세요\"\r\n\t\t\t\tvalue={message}\r\n\t\t\t\tonChange={onChangeMessage}\r\n\t\t\t\tonKeyPress={onKeyPress}\r\n\t\t\t/>\r\n\r\n\t\t\t<button onclick={onClick}>확인</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from 'react';\r\n\r\nconst Inputs = () => {\r\n\tconst [form, setForm] = useState({\r\n\t\tusername: '',\r\n\t\tmessage: '',\r\n\t});\r\n\tconst { username, message } = form;\r\n\tconst onChange = (e) => {\r\n\t\tconst nextForm = {\r\n\t\t\t...form, // 기존의 form 내용을 이 자리에 복사한 뒤\r\n\t\t\t[e.target.name]: e.target.value, // 원하는 값을 덮어 씌우기\r\n\t\t};\r\n\t\tsetForm(nextForm);\r\n\t};\r\n\r\n\tconst onClick = () => {\r\n\t\talert(username + ' : ' + message);\r\n\t\tsetForm({\r\n\t\t\tusername: '',\r\n\t\t\tmessage: '',\r\n\t\t});\r\n\t};\r\n\r\n\tconst onKeyPress = (e) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tonClick();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1>이벤트 연습</h1>\r\n\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"username\"\r\n\t\t\t\tplaceholder=\"사용자 명을 입력하세요\"\r\n\t\t\t\tvalue={username}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t/>\r\n\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"message\"\r\n\t\t\t\tplaceholder=\"아무거나 입력해 보세요\"\r\n\t\t\t\tvalue={message}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tonKeyPress={onKeyPress}\r\n\t\t\t/>\r\n\r\n\t\t\t<button onClick={onClick}>확인</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Inputs;\r\n","import React, { useState } from 'react';\r\n\r\nconst IterationSample = () => {\r\n\tconst style = {\r\n\t\tcursor: 'pointer',\r\n\t};\r\n\r\n\tconst [names, setNames] = useState([\r\n\t\t// 데이터 배열\r\n\t\t{ id: 1, text: '눈사람' },\r\n\t\t{ id: 2, text: '얼음' },\r\n\t\t{ id: 3, text: '눈' },\r\n\t\t{ id: 4, text: '바람' },\r\n\t]);\r\n\tconst [inputText, setInputText] = useState(''); // input의 초기값을 설정할 상태\r\n\tconst [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id\r\n\r\n\tconst onChange = (e) => setInputText(e.target.value);\r\n\r\n\tconst onClick = () => {\r\n\t\tconst nextNames = names.concat({\r\n\t\t\tid: nextId,\r\n\t\t\ttext: inputText,\r\n\t\t});\r\n\t\tsetNextId(nextId + 1); // nextId 값에 1을 더해준다.\r\n\t\tsetNames(nextNames); // names 값을 업데이트한다.\r\n\t\tsetInputText(''); // inputText를 초기화한다.\r\n\t};\r\n\r\n\tconst onPress = (e) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tonClick();\r\n\t\t}\r\n\t};\r\n\r\n\tconst onMouseOver = () => {\r\n\t\talert('더블 클릭시 해당 내용이 삭제됩니다.');\r\n\t};\r\n\r\n\tconst onRemove = (id) => {\r\n\t\tconst nextNames = names.filter((name) => name.id !== id);\r\n\t\tsetNames(nextNames);\r\n\t};\r\n\r\n\tconst nameList = names.map((name) => (\r\n\t\t<li\r\n\t\t\tkey={name.id}\r\n\t\t\tstyle={style}\r\n\t\t\tonMouseOver={onMouseOver}\r\n\t\t\tonDoubleClick={() => onRemove(name.id)}\r\n\t\t>\r\n\t\t\t{name.text}\r\n\t\t</li>\r\n\t));\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<input value={inputText} onChange={onChange} onKeyPress={onPress} />\r\n\t\t\t<button onClick={onClick}>추가</button>\r\n\t\t\t<ul>{nameList}</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default IterationSample;\r\n","import React, { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n\treturn {\r\n\t\t...state,\r\n\t\t[action.name]: action.value,\r\n\t};\r\n}\r\n\r\nconst Info = () => {\r\n\tconst [state, dispatch] = useReducer(reducer, {\r\n\t\tname: '',\r\n\t\tnickname: '',\r\n\t});\r\n\tconst { name, nickname } = state;\r\n\tconst onChange = (e) => {\r\n\t\tdispatch(e.target);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input value={name} onChange={onChange} />\r\n\t\t\t<input value={nickname} onChange={onChange} />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<b>이름 :</b>\r\n\t\t\t\t{name}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>닉네임:</b> {nickname}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Info;\r\n","import React, { useState } from 'react';\r\nimport Info from './Info';\r\n\r\nconst HookHome = () => {\r\n\tconst [visible, setVisible] = useState(false);\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1 className=\"chapter__main\">Hooks을 다뤄볼 기본 페이지입니다.</h1>\r\n\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tsetVisible(!visible);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{visible ? '숨기기 ' : '보이기'}\r\n\t\t\t</button>\r\n\t\t\t<Info />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default HookHome;\r\n","import React, { useRef, useState } from 'react';\r\n\r\nconst getAverage = (numbers) => {\r\n\tconsole.log('평균값 계산 중 ...');\r\n\tif (numbers.length === 0) return 0;\r\n\tconst sum = numbers.reduce((a, b) => a + b);\r\n\treturn sum / numbers.length;\r\n};\r\n\r\nconst Average = () => {\r\n\tconst [list, setList] = useState([]);\r\n\tconst [number, setNumber] = useState('');\r\n\tconst inputE1 = useRef(null);\r\n\r\n\tconst onChange = (e) => {\r\n\t\tsetNumber(e.target.value);\r\n\t};\r\n\tconst onInsert = (e) => {\r\n\t\tconst nextList = list.concat(parseInt(number));\r\n\t\tsetList(nextList);\r\n\t\tsetNumber('');\r\n\t\tinputE1.current.focus();\r\n\t};\r\n\r\n\tconst onPress = (e) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tonInsert();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<input\r\n\t\t\t\tvalue={number}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tonKeyPress={onPress}\r\n\t\t\t\tref={inputE1}\r\n\t\t\t/>\r\n\t\t\t<button onClick={onInsert}>등록</button>\r\n\t\t\t<ul>\r\n\t\t\t\t{list.map((value, index) => (\r\n\t\t\t\t\t<li key={index}>{value}</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<b>평균값</b> {getAverage(list)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Average;\r\n","import React, { useMemo, useState } from 'react';\r\n\r\nconst getAverage = (numbers) => {\r\n\tconsole.log('평균값 계산 중 ...');\r\n\tif (numbers.length === 0) return 0;\r\n\tconst sum = numbers.reduce((a, b) => a + b);\r\n\treturn sum / numbers.length;\r\n};\r\n\r\nconst Average = () => {\r\n\tconst [list, setList] = useState([]);\r\n\tconst [number, setNumber] = useState('');\r\n\r\n\tconst onChange = (e) => {\r\n\t\tsetNumber(e.target.value);\r\n\t};\r\n\tconst onInsert = (e) => {\r\n\t\tconst nextList = list.concat(parseInt(number));\r\n\t\tsetList(nextList);\r\n\t\tsetNumber('');\r\n\t};\r\n\tconst avg = useMemo(() => getAverage(list), [list]);\r\n\r\n\tconst onPress = (e) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tonInsert();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<h1>콘솔 창에서 기존 average와의 차이를 볼 수 있습니다.</h1>\r\n\t\t\t<input value={number} onChange={onChange} onKeyPress={onPress} />\r\n\t\t\t<button onClick={onInsert}>등록</button>\r\n\t\t\t<ul>\r\n\t\t\t\t{list.map((value, index) => (\r\n\t\t\t\t\t<li key={index}>{value}</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t\t<div>\r\n\t\t\t\t<b>평균값</b> {avg}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Average;\r\n","import React from 'react';\r\nimport './Knowledge.css';\r\n\r\nconst Knowledge = () => {\r\n\treturn (\r\n\t\t<div className=\"wrap\">\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2> - '저수준' 언어와 '고수준' 언어</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t개발자들은 기존의 것을 반전시키거나 새로운 것을 만들기 좋아합니다.\r\n\t\t\t\t\t실제로 C언어는 많은 사람이 선택해 사용했으며, 이후 다양한 언어로\r\n\t\t\t\t\t발전했습니다. C언어가 발전해서 Object-C, c++, 파이썬이 되었습니다.\r\n\t\t\t\t\t발전한다는 말은 다양한 의미일 수 있지만, 보통은 사용하기 편해지는\r\n\t\t\t\t\t방식으로 개선되는 것을 뜻합니다. 이런 프로그래밍 언어를 구분하는\r\n\t\t\t\t\t하나의 기준이 있다면, 바로 '저수준' 언어와 '고수준' 언어입니다.\r\n\t\t\t\t\t'저수준'은 '컴퓨터 친화적인 언어'입니다. '고수준'은 '인간 친화적인\r\n\t\t\t\t\t언어'죠.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t컴퓨터 친화적인 언어들은 배우기가 쉽지 않습니다. 컴퓨터가 어떻게\r\n\t\t\t\t\t일해야 하는지 구체적으로, 꼼꼼하게 적어줘야 하져. 그렇지 않으면 오류가\r\n\t\t\t\t\t자주 발생합니다. 대신 장점이 있습니다. 컴퓨터 입장에서는 구체적으로\r\n\t\t\t\t\t적혀있으니 일하기 쉽습니다. 따라서 낮은 사양의 컴퓨터에서도 원활히\r\n\t\t\t\t\t작동합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t반면, 인간 친화적인 언어들은 사람들이 학습하기 쉽습니다. 쓰기도\r\n\t\t\t\t\t편리하고, 유지 보수도 저수준 언어에 비해 쉽습니다. 즉, 원래 컴퓨터에게\r\n\t\t\t\t\t꼼꼼하게 설명해 줘야 할 부분들을 조금만 설명해 줘도 컴퓨터가 알아서\r\n\t\t\t\t\t행동한다는 이야기입니다. 하지만 그만큼 컴퓨터가 더 많이 고민해야 하기\r\n\t\t\t\t\t때문에 저수준 언어보다 작동이 느립니다. 따라서 고수준 언어는 컴퓨터의\r\n\t\t\t\t\t사양에 따라 잘 작동할 수도, 그렇지 않을수도 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t보통 3~4년에 한 번씩 컴퓨터를 교체하기 때문에, 우리가 쓰는 컴퓨터들은\r\n\t\t\t\t\t사양이 아주 좋습니다. 따라서 컴퓨터에 들어가는 소프트웨어들은 고수준의\r\n\t\t\t\t\t언어로 만듭니다. 고수준 언어로 쓰인 문서를읽어도 충분히 돌아갈 만큼\r\n\t\t\t\t\t빠르니까요.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t그럼 저수준 언어는 어디서 사용할까요? 요즘 컴퓨터는 다 빠른데, 왜\r\n\t\t\t\t\t저수준 언어로 코딩을 할까요? 그 이유는 컴퓨터 사양을 낮추고\r\n\t\t\t\t\t싶어서입니다. 그래야 컴퓨터 가격이 저렴해지니까요. 보통 다른 메인\r\n\t\t\t\t\t기능이 있는 가전제품에 컴퓨터가 들어갈 때 저수준 언어를 사용합니다.\r\n\t\t\t\t\tIPTV를 생각해보세요. IPTV 설치비는 아주 저렴하거나 무료입니다. 대신 월\r\n\t\t\t\t\t사용료를 받죠. IPTV 안에도 컴퓨터가 들어가는데, 문제는 컴퓨터의\r\n\t\t\t\t\t가격입니다. 저렴하게 구매한다고 해도 30만원은 줘야 합니다. 그런데 IPTV\r\n\t\t\t\t\t설치비가 30만원 이라고 한다면 사람들이 많이 사용할까요? 아마 그러지\r\n\t\t\t\t\t않을 것입니다. 사람들은 고급 '컴퓨터 기능'을 원하는 게 아니기 때문에\r\n\t\t\t\t\t회사는 IPTV 셋톱박스에 들어가는 컴퓨터 사양을 낮춰서 가격을 떨어뜨려야\r\n\t\t\t\t\t합니다. 이러한 이유로 현실에서는 저수준부터 고수준까지 다양한 언어들이\r\n\t\t\t\t\t사용되고 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2> - 우리가 자바 최신 버전을 설치해야 하는 이유</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t과거에는 운영체제의 종류가 훨씬 다양했습니다. 따라서 개발자가\r\n\t\t\t\t\t배워야하는 프로그래밍 언어도 굉장히 많았죠. 문제는 각기 다른 언어를\r\n\t\t\t\t\t모두 배운다고 해도 프로그램 버그를 수정하거나 새로운 기능을 추가할\r\n\t\t\t\t\t때면, 해야 할 일이 산더미처럼 늘어난다는 것이었습니다. 10개의\r\n\t\t\t\t\t운영체제가 있다고 하면, 같은 작업을 10번씩 해야 하니까요. 이 문제는\r\n\t\t\t\t\t자바라는 프로그래밍 언어가 해결합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t자바를 만든 팀은 각 운영체제 위에 JVM(Java Virtual Machine)이라는\r\n\t\t\t\t\t소프트웨어를 만들었습니다. JVM 위에서 자바 언어로 만든 프로그램이\r\n\t\t\t\t\t돌아갈 수 있도록 한 것이죠. 사용자가 JVM을 설치하기만 하면,\r\n\t\t\t\t\t운영체제별로 여러 개의 프로그램을 만들 필요 없이 자바로만 만들면\r\n\t\t\t\t\t되니까요. 즉, 자바로만 프로그램을 만들어도 모든 운영체젱서 사용할 수\r\n\t\t\t\t\t있께 된 것입니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t자바 이외에도 다양한 언어가 이런 방식을 취하고 있습니다. 대표적인 게\r\n\t\t\t\t\t바로 파이썬입니다. 파이썬으로 프로그램을 만들면 윈도우나 맥 OS 등의\r\n\t\t\t\t\t운영체제 위에서 프로그램을 설치 및 실행할 수 있습니다. 물론 자바나\r\n\t\t\t\t\t파이썬 같은 프로그램을 사용하는 방식의 단점도 있습니다. 속도가\r\n\t\t\t\t\t느리다는 것이죠. 운영체제 위에 프로그램을 올리고, 그 위에 또\r\n\t\t\t\t\t프로그램을 돌리는 것이기 때문입니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2> - 도대체 우분투가 뭐죠?</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t이 질문을 설명하기 위해서는 리눅스를 알아야 합니다. 리눅스는\r\n\t\t\t\t\t운영체제(OS)입니다. 이렇게 들으면 여러분은 다음과 같이 생각할 수\r\n\t\t\t\t\t있어야 합니다. '아, 리눅스는 윈도우, 맥 OS 같은 애들이구나', '아! 그럼\r\n\t\t\t\t\tCPU, 메모리, 보조기억장치들을 우리가 신경 쓰지 않아도, 리눅스가 다\r\n\t\t\t\t\t관리해주겠구나', '아하! 그럼 윈도우 위에서 파워포인트를 돌리듯, 리눅스\r\n\t\t\t\t\t위에서 이런저런 프로그램을 돌리겠구나!'\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t여기서 리눅스를 이야기하는 이유는 리눅스 위에서 '서버 프로그램'을\r\n\t\t\t\t\t돌리기 때문입니다. 먼저 '서버 프로그램'이 뭐 하는 프로그램일지\r\n\t\t\t\t\t생각해봅시다. '서버'는 '클라이언트'의 요청에 응답하는 컴퓨타입니다.\r\n\t\t\t\t\t카카오톡 컴퓨터 혹은 애플의 컴퓨터처럼 사용자의 요청에 따라 파일을\r\n\t\t\t\t\t보내줍니다. 이때 요청의 종류는 다양할 수 있습니다. 로그인, 회원 가입,\r\n\t\t\t\t\t상품 리스트 요청, 등등 이 중에 로그인 요청을 생각해 보겠습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>'로그인을 시켜줘'</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t그럼 어떤 정보들이 필요할까여? '아이디'와 '비밀번호'가 필요합니다.\r\n\t\t\t\t\t보통 이런 정보들은 로그인 요청을 보낼 때 같이 옵니다. 자, 정보를 요청\r\n\t\t\t\t\t받았으니 컴퓨터는 생각을 해야겠죠? '이 아이디가 존재하나?',\r\n\t\t\t\t\t'존재한다면 비밀번호는 이게 맞나?' 컴퓨터가 생각한다는 것은 코딩된\r\n\t\t\t\t\t프로그램이 동작한다는 것을 의미합니다. 프로그래밍 언어로 컴퓨터에 일을\r\n\t\t\t\t\t시킨 거죠. 하드웨어를 직접 컨트롤하지 않으려면 운영체제 위에서\r\n\t\t\t\t\t프로그램을 돌려야겠죠? 즉, 리눅스 위에 이런 생각을 하는 프로그램을\r\n\t\t\t\t\t24시간 365일 돌려놓는 겁니다. 그럼 해당 프로그램이 코딩된 그대로\r\n\t\t\t\t\t생각하고 응답해줍니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t그럼 왜 서버 프로그램을 리눅스 위에서 돌릴까요? 윈도우 OS, 맥 OS, iOS,\r\n\t\t\t\t\t안드로이드 OS를 두고 굳이 리눅스를 사용하는 이유가 뭘까요? 그 이유는\r\n\t\t\t\t\t리눅스가 기본적으로 '무료'이기 때문입니다. 리눅스가 무료로 배포되자\r\n\t\t\t\t\t사람들은 이 운영체제를 발전시켰습니다. 그렇게 다양한 버전의 리눅스가\r\n\t\t\t\t\t만들어졌습니다. 리눅스에도 다양한 버전들이 존재합니다. 리눅스의 유명한\r\n\t\t\t\t\t버전 중 하나가 <b>우분투(Ubuntu)</b>입니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t'우분투는 리눅스다' 즉 리눅스는 하드웨어를 관리해서 사용자가\r\n\t\t\t\t\t프로그램을 사용하기 쉽게 도와주는 윈도우와 맥 OS 같은 운영체제이고,\r\n\t\t\t\t\t우분투는 그런 리눅스 버전 중 하나라고 이해하시면 됩니다. '레드햇',\r\n\t\t\t\t\t'안드로이드'와 같은 유료로 리눅스를 개량해서 판매하는 회사들도\r\n\t\t\t\t\t있습니다. 리눅스는 무료 버전이지만, 그렇기 때문에 누구나 사용할 수\r\n\t\t\t\t\t있고, 고장이 난다면 누군가에게 AS 요청을 하거나 책임을 물을 수\r\n\t\t\t\t\t없습니다. 하지만, 이러한 회사들이 운영체제의 품질을 보장해줍니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2> - API(Application Programming Interface)가 뭐죠?</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t클라이언트 컴퓨터와 서버 컴퓨터가 있다고 생각해봅시다. 클라이언트는\r\n\t\t\t\t\t서버에게 요청을 보냅니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\"메시지, 비디오 파일, 이미 파일을 줘\"</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t그럼 서버는 요청에 따라 적합한 처리를 해서 응답을 줄 겁니다. 하지만\r\n\t\t\t\t\t컴퓨터는 한글을 모릅니다. 어떤 요청이 '메세지를 달라'는 요청인지,\r\n\t\t\t\t\t'로그인 시켜줘' 라는 요청인지 알 수 없습니다. 요청을 구분할 수 있도록\r\n\t\t\t\t\t하는 '체계'가 필요합니다. 그 체계가 바로 API 입니다. API는 클라이언트,\r\n\t\t\t\t\t서버와 같은 서로 다른 프로그램에서 요청과 응답을 주고받을 수 있게 만든\r\n\t\t\t\t\t체계입니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tAPI는 이렇게 진행됩니다. 요청을 보내는 쪽과 응답을 주는 쪽이 나뉘어\r\n\t\t\t\t\t있습니다. 여러분의 스마트폰은(클라이언트) 요청을 보내고, 서버 컴퓨터는\r\n\t\t\t\t\t요청을 받아서 응답을 줍니다. 해당 요청을 보내는 주소는 '서버주소/A'의\r\n\t\t\t\t\t형태로 정의되어 있습니다. 서버의 주소가 이 역할을 하는데, 서버의\r\n\t\t\t\t\t주소는 서버 컴퓨터가 위치한 곳의 주소를 의미합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t이제 API를 클라이언트와 서버의 관전에서 좀 더 자세히 살펴보겠습니다.\r\n\t\t\t\t\t먼저 클라이언트의 관점에서 바라보면, 클라이언트 소프트웨어는 서버에\r\n\t\t\t\t\t요청을 보냅니다. '타임 라인에 사진을 올리는' 요청이라고 생각하면 이\r\n\t\t\t\t\t요청은 크게 4가지 요소로 나눌 수 있습니다. CRUD라고 불리는 이 4가지\r\n\t\t\t\t\t요청은 데이터를 다룰 때 기준이 되는 요청으로, 프로그래머에게 아주\r\n\t\t\t\t\t중요합니다. Create, Read, Update, Delete의 기능을 수행하는데, 대부분의\r\n\t\t\t\t\t요청이 이 4가지 요청에 속합니다. 이 요청은 아전에 클라이언트가\r\n\t\t\t\t\t서버에거 보내는 '서버주소/A' 형태를 띄게 됩니다. 예를 들면\r\n\t\t\t\t\t'컴퓨터의주소/timelinecreate', '컴퓨터의주소/timelineread', ... 등이\r\n\t\t\t\t\t있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t이렇게 CRUD 별로 주소가 생기게 됩니다. 그런데 이렇게 주소를 구성하면\r\n\t\t\t\t\t문제가 있습니다. 주소가 너무 많아지고 관리하기가 힘들어진다는\r\n\t\t\t\t\t것입니다. 이런 주소들이 10,000개가 있다고 가정해봅시다. 프로그래밍은\r\n\t\t\t\t\t사람이 하는 일이기 때문에 몇몇 주소들은 기능이 겹칠 수 있습니다.\r\n\t\t\t\t\tCRUD가 체계적으로 나뉘지 않을 수도 있습니다. 그럼 그 몇몇 API들이\r\n\t\t\t\t\t문제를 일으키고 버그가 생기죠. 따라서 사람들은 좀 더 체계적으로 API를\r\n\t\t\t\t\t관리하고 싶어 했고 그 영향으로 조금 더 체계적인 API라는 사회 운동이\r\n\t\t\t\t\t만들어집니다. 그런 API를 REST(Representational State Transfer)한 API\r\n\t\t\t\t\t즉, RESTful API라고 부릅니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tRESTful API에서는 이전보다 주소 개수가 줄어듭니다. CRUD를 하나의\r\n\t\t\t\t\t주소로 관리합니다. 그리고 요청을 보낼 때 다음과 같이 어떤 요청을\r\n\t\t\t\t\t보냈는지 파악할 수 있는 스티커를 붙여서 함께 전송합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>CREATE(생성해줘): POST</li>\r\n\t\t\t\t\t<li>READ(불러줘): GET</li>\r\n\t\t\t\t\t<li>UPDATE(변경해줘): PUT(전체)/ PATCH(일부)</li>\r\n\t\t\t\t\t<li>DELETE(지워줘): DELETE</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t물론 API는 응답을 보내는 쪽에서 만들고, 요청을 보내는 쪽은 활용할\r\n\t\t\t\t\t뿐이죠. 즉, 해당 API를 미리 만들어놓지 않았다면 쓸 수 없습니다. 이때\r\n\t\t\t\t\t새로운 용어가 하나 등장합니다. 바로 SDK입니다. API를 제공해주는 '다른\r\n\t\t\t\t\t소프트웨어'를 SDK라고 부릅니다. SDK는 Software Development Kit의\r\n\t\t\t\t\t약자로, 소프트웨어를 개발하기 위한 도구입니다. 즉, '** 소프트웨어'를\r\n\t\t\t\t\t개발할 때 도움을 주는 '디른 소프트웨어'입니다. 예를 들면 '구글 지도'가\r\n\t\t\t\t\t있습니다. 구글에서 제공하는 지도 SDK를 설치하면 자신의 소프트웨어에\r\n\t\t\t\t\t구글 지도 기능을 넣을 수 있습니다. 이 SDK에서 제공하는 API를 통해 구글\r\n\t\t\t\t\t지도에 요청을 보낼 수 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2>애플리케이션은 뭔가요?</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t애플리케이션은 설치해서 사용하는 모든 프로그램입니다. 우리가 사용하던\r\n\t\t\t\t\t윈도우에서는 이를 '응용 프로그램'이라 불렀습니다. 그런데 어느 순간\r\n\t\t\t\t\t스마트폰이 등장하고, '앱', '에플리케이션'이라는 말이 퍼지기 시작하면서\r\n\t\t\t\t\t데스크톱에 설치하는 프로그램은 '응용 프로그램'이라고 부르고,\r\n\t\t\t\t\t스마트폰에 설치하는 프로그램은 '앱', 혹은 '어플' 혹은\r\n\t\t\t\t\t'애플리케이션'이라고 부르게 되었습니다. 따라서 운영체제 위에 올라가는\r\n\t\t\t\t\t프로그램은 모두 같은 그룹으로 이해하면 됩니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t아이폰 개발자가 애플리케이션을 만들었다고 가정해봅시다. 개발자는\r\n\t\t\t\t\t'1.0.0'과 같이 자신이 개발한 프로그램에 번호를 부여합니다. 이 번호는\r\n\t\t\t\t\t'버전'이라고 부릅니다. 점을 기준으로 숫자가 3부분으로 나뉩니다.\r\n\t\t\t\t\t회사마다 정책이 다를 수 있지만, 보통 오른쪽 끝자리는 작은 변화를\r\n\t\t\t\t\t의미합니다. 1.0.1, 1.0.2와 같이 작은 변화가 있을 때마다 숫자 하나를\r\n\t\t\t\t\t올려줍니다. 중간 숫자는 하위 버전과 호환이 가능하지만 큰 변화를\r\n\t\t\t\t\t의미합니다. 왼쪽 끝자리는 하위버전과 호환이 가능하지 않은 큰 변화를\r\n\t\t\t\t\t의미합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t만약 누군가는 이러한 버전을 업데이트하고, 누군가는 업데이트를 하지\r\n\t\t\t\t\t않는다면 어떤 문제가 발생할 수 있을까요? 버전 1.0.0에서 아래와 같은\r\n\t\t\t\t\t공지를 애플리케이션에 넣어놨다고 가정해봅시다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\"우리 서비스의 가격은 10,000원 입니다.\"</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t그런데 시간이 흘러 가격이 올랐고, 버전 1.0.1로 업데이트를 하며 변경된\r\n\t\t\t\t\t가격 20,000원으로 공지를 바꿉니다. 이제 무슨 문제가 발생할까요? 버전\r\n\t\t\t\t\t1.0.0을 사용하는 사람들에게는 여전히 10,000원으로 보인다는 점입니다.\r\n\t\t\t\t\t10,000원인줄 알고 결제하려했더니 20,000원이 되어 있는 황당한 상황을\r\n\t\t\t\t\t겪게 되는 거죠. 그래서{' '}\r\n\t\t\t\t\t<b>\r\n\t\t\t\t\t\t변동이 가능한 회사 정책에 관한 정보는 보통 애플리케이션에 넣지\r\n\t\t\t\t\t\t않습니다.\r\n\t\t\t\t\t</b>\r\n\t\t\t\t\tAPI로 서버에서 불러오게 만들죠.\r\n\t\t\t\t</p>\r\n\t\t\t\t<h3>그럼 웹과 애플리케이션의 차이는 뭔가요?</h3>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t애플리케이션을 1.0.0에서 2.0.0으로 변경하기 위해서는 업데이트가\r\n\t\t\t\t\t필요합니다. 모바일이라면 심사도 필요하죠.{' '}\r\n\t\t\t\t\t<b>그렇게 업데이트된 결과를 유저가 다운로드해야 합니다.</b> 그래야\r\n\t\t\t\t\t변화가 반영됩니다. 하지만 웹은 다릅니다. 그냥 서버의 원본을 바꾸면\r\n\t\t\t\t\t됩니다. 그럼 '새로 고침'할 때, 바뀐 HTML, CSS, JavaScript, 이미지\r\n\t\t\t\t\t등등의 파일이 다시 다운로드됩니다. 심사과정도 없고 유저의 업데이트\r\n\t\t\t\t\t과정도 없습니다. 새로 고침하면 자동으로 반영됩니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>'그럼 새로 고침 안 하면 반영이 안 되는 건가?'</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t이런 생각도 듭니다. 맞습니다. 새로 고침을 하지 않으면 반영이 되지\r\n\t\t\t\t\t않습니다. 그런데 우리가 새로 고침하지 않고 얼마나 버틸 수 있을까요?\r\n\t\t\t\t\t웹에서는 나갔다 들어오는 행위가 바로 새로 고침입니다. 결국 유저는 새로\r\n\t\t\t\t\t고침을 할 수밖에 없습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t웹과 애플리케이션은 각각 장점과 단점을 가지고 있습니다. 먼저 웹은\r\n\t\t\t\t\t수정이 용이합니다. 원본만 수정하면 유저가 업데이트하지 않아도 새로\r\n\t\t\t\t\t고침하면 반영됩니다. 빠르게 적용할 수 있죠. 하지만 애플리케이션은\r\n\t\t\t\t\t그렇지 않습니다. 오래 걸리죠. 재미있는 건, 웹의 장점이었던 '새로\r\n\t\t\t\t\t고침'이 사실 웹의 단점이기도 하다는 것입니다. 웹은 네트워크의 영향을\r\n\t\t\t\t\t받기 때문에 환경에 따라 매우 느려질 수도 있고, 웹은 항상 새로 고침을\r\n\t\t\t\t\t통해 매번 HTML, CSS, JavaScript, 이미지 등을 다운로드받아야 합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t웹은 이렇게 네트워크의 영향을 크게 받습니다. 반면 애플리케이션은\r\n\t\t\t\t\t웹보다 효율적으로 네트워크의 영향을 조금만 받도록 만들 수 있습니다.\r\n\t\t\t\t\t대표적인 애플리케이션이 카카오톡입니다. 카카오톡은 여러분의 대화내역을\r\n\t\t\t\t\t여러분의 기기에 저장합니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"section\">\r\n\t\t\t\t<h2>프레임워크와 리아브러리는 뭐가 다른 거죠?</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t여러분이 도넛 가게를 창업한다고 생각해봅시다. 먼저 도넛이 있어야\r\n\t\t\t\t\t합니다. 우유랑 밀가루와 설탕을 구매합니다. 이제 섞어보죠. 열심히\r\n\t\t\t\t\t만들어봅니다. 그리고 마슬 보죠. 맛이 없군요. 버립니다. 새롭게 다시\r\n\t\t\t\t\t만들어봅니다. 또 뭘 해야 할까요? 브랜딩이 필요합니다. 이름도 지어야\r\n\t\t\t\t\t하고, 디자인도 해야 합니다. 할 일이 어마어마하게 많군요. 하지만 이보다\r\n\t\t\t\t\t훨씬 빠르게 도넛 가게를 차릴 수 있는 방법이 있습니다. 바로\r\n\t\t\t\t\t던킨도너츠의 프랜차이즈로 들어가면 됩니다. 던킨도너츠에서 도넛은\r\n\t\t\t\t\t물론이고 포스 단말기, 디자인, 브랜드, 가구 등을 모두 제공합니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t프레임워크는 '던킨도너츠'입니다. iOS 애플리케이션을 만든다고\r\n\t\t\t\t\t생각해보죠. 이때 개발자는 버튼부터 한 땀 한 땀 코딩하지 않습니다.\r\n\t\t\t\t\t버튼은 이미 애플이 만들어 놨습니다. 그렇게 만들어놓은 코드를 개발자가\r\n\t\t\t\t\t사용합니다. 그럼 애플은 왜 프레임워크를 만들어 놨을까요?\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t애플은 앱스토어에 좋은 앱들이 올라오길 바랍니다. 좋은 앱들이 많으면 이\r\n\t\t\t\t\t앱들을 사용하기 위해 아이폰을 살테니까요. 그런데 만약 애플 앱을\r\n\t\t\t\t\t만드는데 버튼 하나하나를 코딩해 10년이 걸린다면 어떨까요? iOS가\r\n\t\t\t\t\t2007년에 등장했으니 적어도 2017년까지는 앱이 만들어지지 못했을 겁니다.\r\n\t\t\t\t\t하지만 앱스토어에는 이미 수많은 애플리케이션들이 있죠. 애플이\r\n\t\t\t\t\t제공해주는 프레임워크 덕분입니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{' '}\r\n\t\t\t\t\tiOS, MacOS, WatchOS 등의 애플의 애플리케이션을 개발하기 위해서는 Swift\r\n\t\t\t\t\t혹은 Objective-C 라는 언어를 사용해야 합니다. 여기에 애플에서\r\n\t\t\t\t\t제공해주는 프레임워크인 코코아를 사용하면 애플의 애플리케이션을 더\r\n\t\t\t\t\t쉽고, 빠르게 만들 수 있습니다. 안드로이드 또한 마찬가지입니다. 자바\r\n\t\t\t\t\t혹은 코틀린이라는 언어를 사용하죠. 그리고 안드로이드 프레임워크를\r\n\t\t\t\t\t사용하면 안드로이드에 올라가는 애플리케이션을 쉽게 만들 수 있습니다.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t그럼 라이브러리는 뭘까요? 라이브러리도 다른 사람들이 만들어놓은 코드를\r\n\t\t\t\t\t이용한다는 측면에서 프레임워크와 같습니다. 하지만 프레임워크가 더 큰\r\n\t\t\t\t\t개념입니다. 각종 라이브러리와 코드들이 모여 프레임워크가 됩니다.\r\n\t\t\t\t\t더불어 한 프로젝트에서 프레임워크는 하나만 쓸 수 있습니다. 한 자동차를\r\n\t\t\t\t\t운전하면서 동시에 다른 자동차를 운전할 수 없는 것과 같습니다. 반면\r\n\t\t\t\t\t라이브러리는 더 작은 개념입니다. 망치나 가위 같은 도구들이기 때문에 한\r\n\t\t\t\t\t프로젝트에서 함께 사용이 가능합니다.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Knowledge;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport Chapter1 from './chapter/Chapter1';\r\nimport Chapter2 from './chapter/Chapter2';\r\nimport Chapter3 from './chapter/Chapter3';\r\nimport Chapter4 from './chapter/Chapter4';\r\nimport Chapter5 from './chapter/Chapter5';\r\nimport Chapter6 from './chapter/Chapter6';\r\nimport Chapter7 from './chapter/Chapter7';\r\nimport Chapter8 from './chapter/Chapter8';\r\nimport Chapter9 from './chapter/Chapter9';\r\nimport Counter from './function/Counter';\r\nimport Counter_Reducer from './function/Counter_Reducer';\r\nimport Say from './function/Say';\r\nimport ValidationSample from './function/ValidationSample';\r\nimport Input from './function/Input';\r\nimport Inputs from './function/Inputs';\r\nimport IterationSample from './function/IterationSample';\r\nimport HookHome from './Hooks/HookHome';\r\nimport Average from './function/Average';\r\nimport Average_useMemo from './function/Average_useMemo';\r\nimport Knowledge from './ITKnowledge/Knowledge';\r\nimport { ImPencil2 } from 'react-icons/im';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"navbar\">\r\n\t\t\t\t<ul className=\"navbar__ul\">\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/\">\r\n\t\t\t\t\t\t\t<ImPencil2 />홈\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/IT\">IT 지식</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter1\">리액트, 챕터 1</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter2\">리액트, 챕터 2</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter3\">리액트, 챕터 3</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter4\">리액트, 챕터 4</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter5\">리액트, 챕터 5</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter6\">리액트, 챕터 6</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter7\">리액트, 챕터 7</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter8\">리액트, 챕터 8</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Chapter9\">리액트, 챕터 9</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/HookHome\">Hooks</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Counter\">Counter</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Counter_Reducer\">Counter_Re</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Say\">Say</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Input\">Input</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Inputs\">Inputs</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/ValidationSample\">Validate</Link>\r\n\t\t\t\t\t</li>\r\n\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/IterationSample\">Iteration</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Average\">Average</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"navbar__li\">\r\n\t\t\t\t\t\t<Link to=\"/react-book/Average_useMemo\">useMemo</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\r\n\t\t\t<Route path=\"/react-book/\" exact={true} component={Home} />\r\n\t\t\t<Route path=\"/react-book/IT\" component={Knowledge} />\r\n\t\t\t<Route path=\"/react-book/Chapter1\" component={Chapter1} />\r\n\t\t\t<Route path=\"/react-book/Chapter2\" component={Chapter2} />\r\n\t\t\t<Route path=\"/react-book/Chapter3\" component={Chapter3} />\r\n\t\t\t<Route path=\"/react-book/Chapter4\" component={Chapter4} />\r\n\t\t\t<Route path=\"/react-book/Chapter5\" component={Chapter5} />\r\n\t\t\t<Route path=\"/react-book/Chapter6\" component={Chapter6} />\r\n\t\t\t<Route path=\"/react-book/Chapter7\" component={Chapter7} />\r\n\t\t\t<Route path=\"/react-book/Chapter8\" component={Chapter8} />\r\n\t\t\t<Route path=\"/react-book/Chapter9\" component={Chapter9} />\r\n\t\t\t<Route path=\"/react-book/HookHome\" component={HookHome} />\r\n\t\t\t<Route path=\"/react-book/Counter\" component={Counter} />\r\n\t\t\t<Route path=\"/react-book/Counter_Reducer\" component={Counter_Reducer} />\r\n\t\t\t<Route path=\"/react-book/Say\" component={Say} />\r\n\t\t\t<Route path=\"/react-book/ValidationSample\" component={ValidationSample} />\r\n\t\t\t<Route path=\"/react-book/Input\" component={Input} />\r\n\t\t\t<Route path=\"/react-book/Inputs\" component={Inputs} />\r\n\t\t\t<Route path=\"/react-book/IterationSample\" component={IterationSample} />\r\n\t\t\t<Route path=\"/react-book/Average\" component={Average} />\r\n\t\t\t<Route path=\"/react-book/Average_useMemo\" component={Average_useMemo} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<App />\r\n\t</BrowserRouter>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}